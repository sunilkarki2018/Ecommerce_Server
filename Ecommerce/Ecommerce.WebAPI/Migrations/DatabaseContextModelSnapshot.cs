// <auto-generated />
using System;
using Ecommerce.Core.src.Entities;
using Ecommerce.WebAPI.src.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.WebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", new[] { "registered", "delivered", "canceled", "pending" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "admin", "customer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("house_number");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_address_user_id");

                    b.ToTable("address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4dc071be-998f-4f95-a12e-283f38788c68"),
                            City = "Cityville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "123",
                            PostCode = "12345",
                            Street = "Main St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("5f2cdcea-eae2-44f2-a9b0-1945b39ad95a")
                        },
                        new
                        {
                            Id = new Guid("0067707d-2fed-46a6-912a-1237c94afbf3"),
                            City = "Townsville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "456",
                            PostCode = "67890",
                            Street = "Oak St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("66fa7ed4-fdad-4a59-b7e4-5c2d5fb4951f")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_avatar");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_avatar_user_id");

                    b.ToTable("avatar", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad3d9191-9189-4f41-abda-a70441b41d32"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 4, 5, 6 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("5f2cdcea-eae2-44f2-a9b0-1945b39ad95a")
                        },
                        new
                        {
                            Id = new Guid("358ca6fc-2795-43ac-ae61-7e7e5b173efa"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 10, 11, 12 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("66fa7ed4-fdad-4a59-b7e4-5c2d5fb4951f")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5dbe879f-2e88-46d8-ab36-6d48eaca5f26"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "tshirts.jpg",
                            Name = "T-Shirts",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("66fa4959-c953-44a4-bd33-dacef295f1d0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "jeans.jpg",
                            Name = "Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c3235966-fb3a-4421-ae25-6d606672441b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "dresses.jpg",
                            Name = "Dresses",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b3fcfa2e-684c-4e4e-8885-ab99b9879fd4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "footwear.jpg",
                            Name = "Footwear",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("844403d8-bfaa-4358-95f5-1907982e5c66"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "accessories.jpg",
                            Name = "Accessories",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_image");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_image_product_line_id");

                    b.ToTable("image", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4d30e6b-23f2-4bfa-989a-fc67b2d9b940"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 98, 11, 165, 222, 117, 7, 206, 162, 41, 124, 19, 253, 122, 151, 101, 140, 98, 162, 163, 119, 84, 16, 228, 170, 94, 123, 213, 222, 150, 33, 61, 252, 45, 80, 26, 239, 185, 151, 20, 14, 187, 4, 27, 82, 86, 215, 84, 216, 174, 161, 220, 8, 75, 194, 206, 109, 37, 151, 232, 28, 87, 231, 254, 57, 219, 81, 131, 208, 6, 70, 102, 135, 19, 15, 181, 91, 248, 248, 237, 162, 51, 251, 184, 6, 6, 183, 65, 133, 218, 144, 84, 49, 129, 42, 223, 152, 31, 120, 50, 2, 213, 101, 181, 246, 149, 49, 184, 240, 215, 236, 79, 136, 200, 166, 200, 32, 132, 42, 104, 24, 216, 187, 18, 56, 29, 146, 242, 104, 231, 181, 21, 121, 46, 103, 128, 78, 204, 198, 58, 2, 0, 73, 159, 247, 206, 153, 120, 43, 48, 147, 128, 75, 251, 122, 7, 216, 11, 143, 100, 46, 84, 12, 136, 220, 63, 225, 167, 199, 74, 54, 255, 1, 166, 226, 214, 89, 101, 141, 46, 39, 221, 216, 147, 22, 19, 114, 21, 216, 209, 153, 155, 106, 139, 13, 173, 219, 233, 210, 91, 67, 79, 163, 53, 53, 220, 176, 250, 42, 189, 131, 113, 215, 255, 59, 58, 8, 163, 79, 101, 206, 175, 7, 90, 172, 214, 25, 4, 26, 10, 239, 87, 127, 222, 224, 120, 197, 199, 148, 14, 203, 61, 0, 112, 255, 129, 219, 137, 155, 166, 191, 175, 108, 120, 101, 193, 33, 142, 142, 68, 159, 96, 95, 188, 29, 152, 172, 227, 122, 62, 102, 145, 143, 0, 242, 163, 151, 166, 41, 228, 38, 237, 188, 51, 20, 128, 27, 1, 186, 107, 255, 17, 141, 39, 52, 10, 98, 234, 20, 61, 152 },
                            ProductLineId = new Guid("2d861d77-9674-42d4-95ae-9c79b84e7a85"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b6de23ac-a719-40cd-9225-a6c3f9270f94"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 186, 74, 47, 244, 154, 65, 120, 54, 205, 8, 73, 112, 107, 212, 198, 221, 0, 62, 238, 106, 149, 62, 199, 2, 241, 200, 104, 254, 180, 110, 25, 231, 150, 35, 53, 89, 224, 16, 170, 81, 157, 28, 30, 4, 38, 20, 195, 196, 12, 27, 134, 73, 235, 250, 158, 144, 244, 137, 161, 69, 38, 233, 179, 5, 200, 140, 192, 144, 238, 12, 136, 134, 176, 15, 70, 171, 33, 174, 117, 60, 41, 193, 13, 163, 115, 18, 241, 50, 177, 80, 175, 175, 199, 10, 121, 35, 208, 87, 16, 42, 13, 175, 70, 41, 229, 182, 185, 209, 254, 53, 235, 94, 4, 242, 198, 12, 250, 170, 88, 44, 182, 50, 43, 94, 32, 62, 20, 160, 17, 82, 149, 50, 169, 157, 173, 74, 89, 118, 72, 98, 220, 206, 83, 68, 21, 79, 82, 227, 202, 64, 255, 68, 181, 63, 26, 33, 185, 80, 156, 90, 167, 200, 202, 150, 89, 30, 82, 1, 177, 130, 40, 41, 213, 121, 215, 123, 126, 186, 154, 103, 66, 236, 222, 237, 113, 47, 229, 215, 1, 148, 228, 106, 178, 170, 95, 151, 174, 189, 126, 167, 124, 94, 76, 125, 196, 73, 138, 3, 56, 98, 98, 40, 225, 251, 244, 226, 210, 97, 186, 72, 183, 141, 178, 41, 143, 73, 50, 52, 75, 239, 126, 30, 242, 227, 83, 65, 194, 140, 105, 1, 225, 146, 116, 62, 1, 189, 49, 215, 91, 245, 59, 13, 102, 74, 51, 68, 62, 152, 155, 213, 70, 152, 132, 173, 158, 160, 64, 73, 133, 236, 206, 86, 221, 164, 79, 17, 61, 7, 48, 196, 231, 154, 229, 231, 80, 121, 161, 199, 129, 158, 96, 107, 126, 169, 13, 40, 205, 248, 249, 173 },
                            ProductLineId = new Guid("00c83fad-5148-4fcd-91cb-f2aab76b66ad"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("091be276-4bcf-47ba-92d1-470373f7d819"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 200, 176, 82, 74, 242, 207, 58, 95, 126, 230, 78, 124, 163, 218, 33, 31, 17, 50, 154, 175, 97, 246, 42, 69, 21, 64, 205, 155, 152, 252, 116, 137, 97, 52, 126, 185, 197, 255, 255, 57, 88, 184, 74, 87, 130, 44, 231, 198, 138, 143, 252, 231, 128, 165, 74, 92, 207, 233, 232, 38, 225, 134, 22, 86, 16, 52, 217, 68, 45, 120, 5, 39, 213, 191, 147, 173, 187, 142, 205, 104, 185, 31, 2, 203, 43, 87, 76, 129, 44, 21, 216, 8, 52, 7, 244, 210, 188, 82, 173, 39, 237, 141, 203, 105, 19, 252, 5, 241, 105, 231, 76, 188, 54, 137, 132, 141, 201, 9, 1, 172, 18, 72, 169, 221, 192, 231, 143, 150, 49, 127, 222, 216, 213, 187, 124, 206, 65, 161, 69, 232, 60, 194, 119, 194, 113, 82, 179, 246, 33, 105, 252, 240, 182, 245, 114, 12, 100, 43, 86, 50, 12, 192, 83, 116, 179, 172, 194, 123, 145, 187, 85, 56, 250, 109, 123, 239, 240, 81, 5, 215, 181, 193, 60, 170, 79, 75, 76, 232, 72, 129, 67, 126, 85, 175, 227, 138, 252, 226, 203, 63, 102, 150, 100, 235, 191, 27, 72, 168, 15, 199, 121, 242, 194, 234, 2, 222, 234, 183, 162, 97, 154, 134, 126, 50, 51, 80, 85, 117, 243, 213, 233, 254, 152, 64, 104, 152, 46, 167, 114, 208, 46, 111, 252, 241, 215, 221, 196, 104, 93, 128, 104, 22, 159, 167, 35, 55, 52, 105, 175, 209, 76, 57, 77, 58, 113, 117, 16, 186, 230, 78, 41, 176, 196, 184, 139, 99, 58, 254, 201, 25, 203, 79, 94, 97, 52, 175, 6, 114, 185, 252, 207, 179, 181, 252, 254, 92, 117, 182, 116, 128 },
                            ProductLineId = new Guid("a50e4758-e78e-46f8-a109-9e46553a1be9"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3a4dc3d9-420a-4af4-8f17-7068c5b85366"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 98, 109, 32, 179, 42, 33, 42, 41, 20, 179, 11, 80, 135, 218, 243, 138, 179, 206, 112, 238, 120, 20, 97, 113, 239, 125, 31, 54, 237, 171, 69, 81, 212, 245, 230, 120, 200, 222, 175, 135, 161, 5, 41, 29, 117, 167, 219, 187, 171, 210, 120, 51, 69, 247, 86, 123, 65, 234, 205, 29, 8, 221, 73, 93, 90, 174, 147, 166, 93, 83, 104, 191, 134, 173, 150, 196, 31, 102, 130, 37, 195, 145, 127, 199, 215, 246, 132, 210, 168, 108, 109, 93, 209, 111, 5, 70, 200, 84, 190, 35, 85, 190, 0, 64, 35, 186, 170, 84, 231, 95, 94, 133, 122, 57, 193, 205, 61, 150, 72, 211, 90, 190, 234, 121, 129, 116, 169, 192, 116, 88, 216, 213, 245, 198, 197, 240, 146, 167, 15, 103, 95, 68, 7, 207, 118, 87, 79, 71, 212, 209, 141, 46, 213, 58, 219, 97, 236, 34, 45, 188, 71, 146, 252, 159, 140, 233, 238, 12, 170, 210, 76, 28, 44, 82, 223, 77, 87, 152, 101, 170, 167, 159, 60, 74, 243, 246, 239, 84, 126, 61, 17, 167, 177, 183, 236, 24, 106, 19, 131, 111, 141, 235, 109, 144, 116, 147, 153, 141, 38, 106, 8, 123, 26, 141, 254, 171, 227, 226, 234, 145, 28, 219, 157, 151, 60, 84, 242, 227, 9, 63, 230, 227, 179, 160, 130, 16, 188, 67, 104, 155, 191, 153, 172, 200, 89, 164, 105, 11, 201, 155, 75, 235, 38, 201, 214, 220, 68, 67, 238, 19, 146, 87, 50, 4, 188, 111, 222, 15, 224, 87, 81, 140, 115, 100, 159, 59, 204, 0, 138, 12, 207, 224, 171, 119, 2, 13, 25, 213, 26, 62, 163, 152, 44, 60, 244, 199, 44, 45, 5, 110 },
                            ProductLineId = new Guid("b520a4b9-b10d-4e94-88ef-42c0c2d3317e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bccacf9a-9b4a-4f41-8335-52f4b763787d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 51, 140, 125, 132, 45, 21, 15, 209, 148, 5, 29, 159, 139, 104, 255, 116, 152, 4, 184, 209, 218, 175, 13, 176, 133, 33, 189, 78, 11, 158, 80, 235, 227, 63, 200, 239, 175, 138, 224, 50, 92, 169, 97, 132, 175, 195, 89, 192, 59, 30, 176, 12, 184, 16, 162, 98, 225, 176, 80, 180, 219, 50, 200, 142, 30, 134, 91, 25, 231, 111, 183, 188, 123, 52, 87, 96, 178, 53, 9, 207, 174, 103, 39, 36, 131, 97, 80, 83, 228, 41, 61, 118, 56, 208, 195, 156, 213, 243, 125, 248, 116, 190, 146, 83, 140, 141, 206, 80, 164, 128, 153, 169, 200, 178, 215, 71, 51, 236, 4, 154, 165, 189, 152, 89, 243, 103, 188, 29, 132, 188, 0, 114, 66, 5, 153, 164, 108, 115, 90, 215, 133, 9, 200, 223, 6, 235, 36, 131, 74, 200, 94, 130, 110, 30, 111, 232, 242, 6, 204, 116, 120, 211, 112, 243, 235, 56, 60, 174, 171, 233, 159, 155, 252, 198, 213, 19, 203, 142, 91, 215, 192, 69, 132, 136, 176, 142, 220, 0, 119, 83, 206, 198, 106, 128, 185, 224, 254, 26, 141, 134, 156, 100, 243, 224, 202, 106, 207, 110, 20, 25, 84, 162, 95, 164, 129, 200, 87, 120, 16, 184, 13, 140, 66, 34, 172, 188, 31, 220, 41, 144, 218, 105, 87, 122, 193, 223, 192, 31, 241, 134, 127, 86, 111, 160, 246, 3, 12, 62, 40, 227, 187, 43, 46, 215, 89, 244, 49, 58, 129, 255, 181, 154, 180, 217, 140, 186, 3, 85, 80, 149, 90, 250, 108, 2, 111, 121, 216, 232, 241, 114, 29, 209, 106, 28, 78, 16, 179, 125, 195, 215, 162, 248, 47, 179, 234, 25, 156, 143, 154, 205 },
                            ProductLineId = new Guid("2d861d77-9674-42d4-95ae-9c79b84e7a85"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("969650db-46e6-4883-9599-7cbb5baafcd4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 62, 45, 95, 113, 155, 169, 178, 47, 209, 224, 46, 229, 89, 247, 34, 6, 12, 118, 95, 171, 79, 73, 227, 246, 149, 21, 197, 150, 123, 102, 249, 102, 206, 61, 83, 233, 200, 78, 17, 33, 169, 183, 195, 172, 188, 232, 44, 100, 42, 31, 101, 215, 15, 66, 213, 222, 235, 42, 12, 178, 8, 230, 30, 250, 58, 4, 71, 184, 66, 226, 232, 83, 59, 12, 181, 60, 48, 176, 187, 137, 226, 66, 165, 247, 53, 239, 104, 20, 181, 188, 42, 159, 112, 167, 235, 211, 175, 104, 156, 253, 47, 207, 10, 12, 115, 20, 102, 40, 253, 30, 50, 76, 215, 6, 131, 201, 91, 37, 29, 33, 239, 6, 151, 238, 239, 158, 240, 128, 109, 25, 38, 129, 97, 222, 161, 13, 119, 78, 0, 123, 19, 26, 44, 75, 222, 111, 48, 177, 18, 235, 14, 187, 77, 197, 198, 244, 17, 178, 63, 197, 64, 8, 55, 160, 33, 56, 101, 181, 193, 1, 254, 202, 203, 19, 38, 230, 139, 36, 212, 51, 188, 45, 152, 71, 139, 139, 44, 91, 230, 231, 208, 92, 42, 109, 75, 197, 101, 115, 14, 142, 218, 236, 195, 76, 154, 85, 223, 142, 20, 186, 97, 131, 93, 86, 180, 154, 86, 63, 20, 195, 81, 227, 214, 133, 47, 194, 232, 113, 86, 24, 246, 128, 160, 124, 15, 245, 137, 74, 173, 209, 171, 81, 200, 170, 30, 109, 105, 62, 66, 24, 153, 58, 102, 136, 6, 128, 102, 162, 109, 48, 55, 117, 146, 7, 106, 151, 173, 225, 223, 131, 31, 212, 29, 70, 120, 131, 222, 7, 152, 109, 5, 2, 217, 26, 4, 221, 81, 78, 209, 85, 85, 35, 109, 39, 112, 252, 98, 232, 217, 212 },
                            ProductLineId = new Guid("00c83fad-5148-4fcd-91cb-f2aab76b66ad"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("caa5c606-5b01-45de-b116-5c399801509c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 230, 50, 50, 213, 164, 213, 223, 31, 9, 120, 185, 194, 40, 156, 239, 35, 192, 151, 251, 35, 148, 205, 17, 135, 213, 199, 57, 181, 28, 187, 156, 111, 218, 50, 29, 150, 126, 146, 149, 162, 215, 253, 108, 31, 131, 249, 201, 162, 3, 150, 208, 236, 161, 77, 159, 24, 74, 76, 71, 13, 244, 16, 84, 148, 59, 234, 28, 17, 141, 196, 113, 253, 117, 139, 95, 181, 189, 238, 177, 21, 149, 17, 104, 201, 71, 246, 233, 172, 36, 194, 49, 236, 7, 225, 186, 141, 129, 43, 133, 182, 110, 132, 248, 194, 183, 71, 158, 135, 219, 254, 245, 106, 16, 220, 90, 45, 160, 60, 219, 124, 74, 245, 188, 77, 88, 29, 213, 88, 166, 127, 73, 31, 59, 74, 205, 69, 48, 136, 173, 251, 166, 88, 11, 94, 126, 150, 177, 121, 142, 64, 143, 70, 113, 144, 160, 132, 182, 226, 85, 10, 109, 245, 52, 175, 211, 146, 20, 199, 114, 122, 160, 193, 52, 229, 92, 10, 113, 151, 99, 87, 152, 139, 188, 124, 139, 62, 223, 2, 219, 120, 51, 90, 121, 165, 69, 54, 145, 82, 13, 33, 55, 239, 5, 245, 117, 51, 193, 99, 43, 226, 193, 0, 136, 163, 175, 205, 219, 119, 88, 188, 42, 64, 213, 41, 83, 155, 49, 124, 127, 18, 147, 37, 100, 175, 53, 82, 231, 246, 168, 82, 67, 146, 80, 22, 7, 2, 50, 224, 28, 96, 94, 180, 46, 131, 27, 235, 217, 76, 230, 72, 118, 221, 224, 232, 234, 205, 225, 70, 25, 154, 144, 38, 237, 83, 171, 235, 47, 77, 72, 213, 75, 180, 25, 1, 253, 246, 101, 72, 128, 6, 140, 76, 64, 205, 58, 81, 179, 247, 114, 138 },
                            ProductLineId = new Guid("a50e4758-e78e-46f8-a109-9e46553a1be9"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3f78db88-881c-4d84-9e86-6b49173bafa6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 183, 150, 231, 157, 30, 69, 219, 239, 248, 46, 200, 89, 204, 238, 146, 58, 195, 77, 246, 171, 226, 82, 84, 121, 225, 177, 140, 129, 56, 66, 116, 166, 49, 65, 159, 126, 223, 251, 102, 132, 58, 214, 147, 244, 1, 162, 130, 100, 89, 167, 26, 123, 184, 209, 216, 215, 179, 32, 148, 184, 44, 139, 209, 253, 105, 207, 66, 197, 96, 115, 139, 180, 8, 226, 71, 120, 19, 177, 245, 41, 61, 139, 209, 163, 81, 81, 45, 174, 13, 9, 104, 110, 67, 88, 125, 133, 232, 233, 100, 5, 44, 173, 6, 151, 247, 46, 184, 242, 218, 223, 178, 18, 1, 167, 132, 194, 62, 205, 211, 205, 69, 162, 102, 219, 232, 185, 221, 1, 0, 82, 173, 15, 19, 85, 236, 71, 2, 171, 29, 59, 238, 195, 52, 244, 181, 42, 164, 86, 181, 58, 101, 38, 204, 217, 72, 190, 243, 140, 81, 147, 74, 157, 50, 200, 28, 230, 206, 194, 34, 26, 92, 80, 63, 176, 107, 27, 185, 94, 210, 237, 241, 128, 198, 19, 113, 82, 141, 235, 61, 73, 77, 251, 251, 223, 103, 100, 20, 91, 202, 78, 159, 202, 78, 69, 28, 114, 22, 122, 78, 157, 24, 157, 138, 49, 235, 255, 105, 166, 19, 16, 255, 60, 154, 211, 242, 103, 76, 129, 17, 49, 106, 237, 25, 98, 86, 87, 16, 114, 36, 7, 245, 98, 188, 2, 1, 113, 44, 87, 151, 246, 183, 161, 30, 146, 66, 38, 120, 123, 101, 158, 21, 249, 106, 15, 110, 153, 91, 153, 56, 0, 117, 80, 149, 96, 186, 160, 203, 28, 178, 232, 202, 152, 187, 243, 81, 215, 219, 195, 146, 215, 31, 207, 62, 159, 225, 104, 32, 249, 203, 138 },
                            ProductLineId = new Guid("b520a4b9-b10d-4e94-88ef-42c0c2d3317e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<OrderStatus>("OrderStatus")
                        .HasColumnType("order_status")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId", "OrderId")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Inventory")
                        .HasColumnType("integer")
                        .HasColumnName("inventory");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<Guid?>("ProductSizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_size_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_products_product_line_id");

                    b.HasIndex("ProductSizeId")
                        .HasDatabaseName("ix_products_product_size_id");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e42ffdfa-7a7e-4b08-b6fc-832016d227d0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("2d861d77-9674-42d4-95ae-9c79b84e7a85"),
                            ProductSizeId = new Guid("f38d3472-0cb2-4663-87e9-a0518e7aa780"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("80be2f3c-27d7-4282-a84b-2c5574b6f76d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("2d861d77-9674-42d4-95ae-9c79b84e7a85"),
                            ProductSizeId = new Guid("c5f767a2-4f84-41b4-918a-580a3de2b8c9"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6e1f823e-3633-423f-b597-4c634cb9a171"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("2d861d77-9674-42d4-95ae-9c79b84e7a85"),
                            ProductSizeId = new Guid("2836e6bb-98ab-412e-948a-99aa0ec9be69"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("14f14e01-76a0-434e-8761-8f07f1b6f939"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("2d861d77-9674-42d4-95ae-9c79b84e7a85"),
                            ProductSizeId = new Guid("b107cec3-88bf-488c-a23f-7ef7d6f6879f"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f95ddb2c-c866-4244-93e1-b5e3f21362f5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("00c83fad-5148-4fcd-91cb-f2aab76b66ad"),
                            ProductSizeId = new Guid("f38d3472-0cb2-4663-87e9-a0518e7aa780"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("54f32dc3-35f4-40a1-947c-957122eb20c3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("00c83fad-5148-4fcd-91cb-f2aab76b66ad"),
                            ProductSizeId = new Guid("c5f767a2-4f84-41b4-918a-580a3de2b8c9"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3ba78da3-a902-4280-8616-c79abb7505ba"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("00c83fad-5148-4fcd-91cb-f2aab76b66ad"),
                            ProductSizeId = new Guid("2836e6bb-98ab-412e-948a-99aa0ec9be69"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e5a64c9c-8955-41e7-8a79-1d704d5cbdef"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("00c83fad-5148-4fcd-91cb-f2aab76b66ad"),
                            ProductSizeId = new Guid("b107cec3-88bf-488c-a23f-7ef7d6f6879f"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e760061f-4405-4584-bc39-a7abe873bc54"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("a50e4758-e78e-46f8-a109-9e46553a1be9"),
                            ProductSizeId = new Guid("f38d3472-0cb2-4663-87e9-a0518e7aa780"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("52323f62-2512-49ff-b8d1-082e7260460c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("a50e4758-e78e-46f8-a109-9e46553a1be9"),
                            ProductSizeId = new Guid("c5f767a2-4f84-41b4-918a-580a3de2b8c9"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("428a50dc-26fb-49d5-bff8-566fe493c7b0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("a50e4758-e78e-46f8-a109-9e46553a1be9"),
                            ProductSizeId = new Guid("2836e6bb-98ab-412e-948a-99aa0ec9be69"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5db916f1-f7f5-41c5-9ba5-b1ddb7ad50c4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("a50e4758-e78e-46f8-a109-9e46553a1be9"),
                            ProductSizeId = new Guid("b107cec3-88bf-488c-a23f-7ef7d6f6879f"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("77f5e3b3-3485-4b41-8f88-b29731b48282"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("b520a4b9-b10d-4e94-88ef-42c0c2d3317e"),
                            ProductSizeId = new Guid("f38d3472-0cb2-4663-87e9-a0518e7aa780"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2eaa108e-3094-4690-8b21-d40f2f6d2771"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("b520a4b9-b10d-4e94-88ef-42c0c2d3317e"),
                            ProductSizeId = new Guid("c5f767a2-4f84-41b4-918a-580a3de2b8c9"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1b638c8f-6001-46cf-b43a-8266ecb30d07"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("b520a4b9-b10d-4e94-88ef-42c0c2d3317e"),
                            ProductSizeId = new Guid("2836e6bb-98ab-412e-948a-99aa0ec9be69"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8958760d-8599-4efc-b53f-bc54ca3bacf8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("b520a4b9-b10d-4e94-88ef-42c0c2d3317e"),
                            ProductSizeId = new Guid("b107cec3-88bf-488c-a23f-7ef7d6f6879f"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b996930a-4db7-4f29-8a18-873605408dd7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("b520a4b9-b10d-4e94-88ef-42c0c2d3317e"),
                            ProductSizeId = new Guid("f38d3472-0cb2-4663-87e9-a0518e7aa780"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ef310a44-362b-4e79-99b6-830828cc7f7d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("b520a4b9-b10d-4e94-88ef-42c0c2d3317e"),
                            ProductSizeId = new Guid("c5f767a2-4f84-41b4-918a-580a3de2b8c9"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fe3e0bae-75ad-4f52-88a0-8554aba6c7a9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("b520a4b9-b10d-4e94-88ef-42c0c2d3317e"),
                            ProductSizeId = new Guid("2836e6bb-98ab-412e-948a-99aa0ec9be69"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("53d655fa-30a0-47c6-97ad-ad802a1aeb0d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("b520a4b9-b10d-4e94-88ef-42c0c2d3317e"),
                            ProductSizeId = new Guid("b107cec3-88bf-488c-a23f-7ef7d6f6879f"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_line");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_product_line_category_id");

                    b.ToTable("product_line", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d861d77-9674-42d4-95ae-9c79b84e7a85"),
                            CategoryId = new Guid("5dbe879f-2e88-46d8-ab36-6d48eaca5f26"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A comfortable and stylish cotton T-shirt.",
                            Price = 19.99m,
                            Title = "Cotton T-Shirt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00c83fad-5148-4fcd-91cb-f2aab76b66ad"),
                            CategoryId = new Guid("66fa4959-c953-44a4-bd33-dacef295f1d0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Slim fit jeans for a modern look.",
                            Price = 49.99m,
                            Title = "Slim Fit Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a50e4758-e78e-46f8-a109-9e46553a1be9"),
                            CategoryId = new Guid("c3235966-fb3a-4421-ae25-6d606672441b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A floral summer dress for any occasion.",
                            Price = 29.99m,
                            Title = "Summer Dress",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b520a4b9-b10d-4e94-88ef-42c0c2d3317e"),
                            CategoryId = new Guid("b3fcfa2e-684c-4e4e-8885-ab99b9879fd4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Casual sneakers for everyday wear.",
                            Price = 39.99m,
                            Title = "Sneakers",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("03ece188-67da-4acb-b0c8-3694ae5eb45a"),
                            CategoryId = new Guid("844403d8-bfaa-4358-95f5-1907982e5c66"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Classic leather belt to complete your look.",
                            Price = 14.99m,
                            Title = "Leather Belt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_product_size");

                    b.ToTable("product_size", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f38d3472-0cb2-4663-87e9-a0518e7aa780"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 32
                        },
                        new
                        {
                            Id = new Guid("c5f767a2-4f84-41b4-918a-580a3de2b8c9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 34
                        },
                        new
                        {
                            Id = new Guid("2836e6bb-98ab-412e-948a-99aa0ec9be69"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 36
                        },
                        new
                        {
                            Id = new Guid("b107cec3-88bf-488c-a23f-7ef7d6f6879f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 38
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_reviews_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Role>("Role")
                        .HasColumnType("role")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f2cdcea-eae2-44f2-a9b0-1945b39ad95a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@mail.com",
                            FirstName = "JohnAdmin",
                            LastName = "Doe",
                            Password = "bffbe95f61b258a8d392acf02fb1419d0217391850e7cf12ae3a594ef947d0ac",
                            Role = Role.Admin,
                            Salt = new byte[] { 129, 34, 225, 227, 15, 210, 44, 150, 247, 7, 74, 240, 226, 32, 62, 82, 64, 61, 237, 123, 103, 18, 214, 2, 17, 142, 137, 229, 162, 190, 89, 96, 3, 66, 3, 142, 253, 137, 1, 4, 245, 176, 69, 54, 212, 255, 22, 17, 192, 97, 119, 188, 64, 45, 36, 180, 137, 167, 204, 102, 138, 142, 79, 255 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("66fa7ed4-fdad-4a59-b7e4-5c2d5fb4951f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer@mail.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Password = "f822d8ea2109a5e3753ddcd76c89fd493846b1598caf1168f841a8e511ee4924",
                            Role = Role.Customer,
                            Salt = new byte[] { 192, 89, 85, 142, 0, 203, 237, 11, 207, 71, 150, 102, 233, 222, 86, 133, 12, 203, 56, 157, 8, 190, 76, 242, 56, 240, 253, 70, 0, 234, 176, 254, 91, 150, 215, 20, 115, 9, 31, 176, 27, 210, 147, 205, 207, 194, 234, 61, 222, 79, 156, 53, 99, 41, 129, 193, 144, 173, 255, 147, 163, 15, 162, 120 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Address")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Avatar")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Avatar", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_avatar_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_product_line_product_line_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Order", null)
                        .WithMany("orderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", "ProductLine")
                        .WithMany()
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_product_line_product_line_id");

                    b.HasOne("Ecommerce.Core.src.Entities.ProductSize", "ProductSize")
                        .WithMany("Products")
                        .HasForeignKey("ProductSizeId")
                        .HasConstraintName("fk_products_product_size_product_size_id");

                    b.Navigation("ProductLine");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Category", "Category")
                        .WithMany("ProductLines")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_line_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_products_product_id");

                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Navigation("ProductLines");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Avatar")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
