// <auto-generated />
using System;
using Ecommerce.Core.src.Entities;
using Ecommerce.WebAPI.src.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.WebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", new[] { "registered", "delivered", "canceled", "pending" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "admin", "customer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("house_number");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_address_user_id");

                    b.ToTable("address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("85c633b5-4ded-4826-abda-6f9646198442"),
                            City = "Cityville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "123",
                            PostCode = "12345",
                            Street = "Main St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("12e02f21-88b6-4a89-a701-f56f3641b328")
                        },
                        new
                        {
                            Id = new Guid("09e3a7b4-a547-4158-9ca6-b4a76f653607"),
                            City = "Townsville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "456",
                            PostCode = "67890",
                            Street = "Oak St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("a9bca7dc-b115-4c15-83f3-819a6fc700b4")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_avatar");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_avatar_user_id");

                    b.ToTable("avatar", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a5e52b1-1925-4b35-8676-80c992c3f10f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 4, 5, 6 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("12e02f21-88b6-4a89-a701-f56f3641b328")
                        },
                        new
                        {
                            Id = new Guid("c07a989c-a517-4243-a420-0501a576ea12"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 10, 11, 12 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("a9bca7dc-b115-4c15-83f3-819a6fc700b4")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("306c9811-6a32-4ed6-b7b1-291ca1318ddc"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "tshirts.jpg",
                            Name = "T-Shirts",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f48237cd-7881-488c-bd09-0a7221b8ab9a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "jeans.jpg",
                            Name = "Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f282c2ad-ba0d-42cc-bb58-5a48f219dec6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "dresses.jpg",
                            Name = "Dresses",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("35a617d8-e3df-4b9a-b48f-2718ff6e6339"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "footwear.jpg",
                            Name = "Footwear",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("73c08787-5db5-454a-ba21-4652a72582b7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "accessories.jpg",
                            Name = "Accessories",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_image");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_image_product_line_id");

                    b.ToTable("image", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb3da1c8-72ec-4383-acbe-12b84eef3efb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 174, 56, 234, 19, 48, 55, 85, 250, 48, 245, 137, 72, 232, 26, 69, 129, 148, 67, 199, 147, 76, 246, 36, 62, 5, 176, 52, 250, 82, 173, 118, 67, 141, 17, 71, 20, 111, 207, 44, 185, 152, 173, 52, 248, 250, 75, 76, 130, 140, 201, 147, 5, 10, 247, 179, 61, 253, 204, 157, 52, 245, 103, 28, 56, 227, 207, 189, 76, 182, 136, 172, 220, 218, 233, 12, 116, 69, 202, 60, 119, 135, 59, 149, 130, 25, 86, 156, 160, 138, 79, 193, 170, 184, 243, 85, 50, 124, 72, 60, 221, 5, 175, 116, 25, 186, 169, 246, 33, 86, 84, 249, 1, 195, 249, 247, 20, 236, 249, 178, 185, 120, 57, 115, 205, 23, 238, 44, 8, 43, 234, 64, 172, 146, 247, 79, 157, 239, 142, 107, 9, 186, 166, 233, 43, 156, 176, 178, 196, 68, 134, 10, 69, 38, 58, 0, 142, 27, 79, 228, 207, 60, 67, 207, 85, 52, 151, 33, 28, 87, 112, 246, 154, 126, 205, 75, 124, 147, 56, 81, 67, 190, 203, 113, 224, 25, 96, 214, 196, 192, 235, 17, 120, 165, 41, 132, 15, 140, 84, 189, 36, 121, 37, 239, 188, 232, 71, 75, 102, 178, 237, 221, 249, 69, 39, 17, 149, 231, 173, 187, 229, 158, 111, 130, 142, 206, 107, 64, 230, 102, 122, 148, 212, 217, 114, 33, 64, 138, 202, 37, 94, 95, 40, 165, 23, 90, 15, 68, 144, 46, 112, 69, 22, 251, 119, 195, 95, 69, 63, 69, 65, 62, 196, 143, 236, 67, 186, 165, 202, 237, 141, 167, 232, 15, 218, 220, 33, 89, 4, 114, 23, 169, 22, 211, 176, 208, 201, 3, 33, 210, 40, 117, 86, 101, 48, 154, 151, 187, 238, 14, 181 },
                            ProductLineId = new Guid("11bd0f6a-68c2-4004-a3da-2049e9eb1198"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("094c4632-8d45-4553-b228-0cbd73f4b490"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 45, 247, 49, 229, 40, 152, 2, 20, 106, 205, 242, 112, 212, 15, 231, 152, 179, 162, 135, 227, 51, 162, 172, 198, 215, 178, 38, 132, 147, 152, 250, 115, 79, 197, 209, 51, 46, 138, 206, 199, 193, 154, 61, 99, 65, 65, 182, 23, 72, 109, 191, 131, 146, 79, 92, 58, 160, 146, 191, 26, 134, 52, 250, 123, 123, 54, 97, 55, 0, 215, 227, 222, 54, 219, 18, 196, 160, 211, 0, 76, 122, 35, 239, 110, 0, 34, 47, 118, 77, 99, 67, 61, 139, 114, 115, 185, 63, 127, 185, 199, 65, 93, 34, 35, 203, 152, 212, 7, 17, 71, 137, 254, 175, 104, 43, 94, 64, 120, 171, 174, 246, 116, 34, 68, 16, 244, 70, 108, 223, 227, 153, 182, 4, 64, 9, 250, 64, 152, 59, 151, 150, 125, 62, 25, 87, 247, 229, 23, 155, 87, 76, 5, 13, 79, 80, 193, 156, 157, 217, 56, 151, 254, 107, 114, 255, 72, 139, 157, 251, 82, 175, 16, 31, 5, 137, 230, 79, 102, 65, 47, 3, 131, 65, 229, 38, 124, 175, 111, 59, 94, 240, 84, 81, 233, 167, 184, 83, 34, 195, 51, 16, 36, 52, 231, 199, 138, 250, 142, 95, 63, 16, 47, 238, 191, 93, 168, 252, 88, 36, 226, 56, 231, 95, 161, 11, 224, 13, 170, 246, 21, 92, 60, 69, 149, 217, 82, 143, 230, 252, 28, 49, 0, 127, 141, 210, 6, 103, 23, 223, 199, 74, 251, 25, 3, 148, 117, 247, 2, 176, 199, 163, 246, 3, 191, 122, 240, 190, 237, 121, 37, 253, 46, 137, 40, 73, 4, 35, 170, 164, 252, 137, 52, 58, 130, 58, 57, 78, 228, 197, 125, 119, 34, 79, 127, 76, 231, 231, 189, 237, 120 },
                            ProductLineId = new Guid("2410521a-0b2c-4036-8450-e08ea13d3f4b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("04b269b2-2bc6-4f12-affa-fc1761661c56"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 52, 112, 205, 179, 194, 51, 208, 178, 38, 64, 151, 185, 56, 152, 182, 121, 4, 250, 153, 226, 3, 61, 213, 127, 135, 84, 253, 162, 246, 17, 243, 147, 110, 52, 148, 96, 163, 222, 93, 226, 6, 92, 230, 18, 62, 89, 249, 224, 148, 81, 84, 53, 252, 99, 42, 140, 119, 231, 76, 165, 203, 193, 236, 177, 113, 61, 176, 70, 181, 146, 58, 205, 111, 98, 104, 220, 161, 28, 139, 51, 31, 163, 147, 13, 38, 63, 75, 123, 220, 210, 113, 2, 53, 57, 211, 223, 60, 133, 152, 106, 66, 121, 205, 14, 215, 255, 166, 1, 235, 40, 37, 133, 231, 64, 20, 231, 2, 42, 206, 105, 209, 221, 174, 92, 94, 68, 241, 248, 18, 240, 165, 30, 48, 169, 163, 139, 162, 148, 222, 118, 9, 221, 97, 89, 249, 93, 53, 97, 201, 205, 135, 55, 154, 2, 23, 231, 183, 72, 85, 207, 251, 157, 196, 107, 192, 244, 81, 250, 236, 144, 228, 223, 166, 226, 146, 27, 159, 94, 142, 219, 23, 10, 213, 151, 226, 182, 43, 37, 228, 42, 173, 77, 197, 90, 171, 211, 172, 180, 139, 90, 104, 18, 116, 56, 71, 177, 6, 149, 106, 53, 77, 233, 117, 82, 224, 89, 170, 190, 80, 71, 214, 179, 85, 148, 250, 235, 225, 227, 114, 225, 93, 113, 11, 173, 135, 140, 107, 16, 162, 201, 64, 51, 218, 62, 18, 11, 41, 199, 196, 170, 176, 105, 6, 218, 18, 182, 109, 3, 11, 75, 1, 73, 69, 179, 208, 3, 114, 214, 208, 170, 33, 82, 137, 134, 221, 183, 38, 141, 152, 171, 150, 6, 63, 202, 166, 126, 39, 28, 132, 174, 194, 47, 34, 90, 198, 62, 164, 122, 108, 50 },
                            ProductLineId = new Guid("8de00c4c-0a35-4a01-ba7a-b980e99950c4"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ee1a33a2-d3c6-42bb-9932-47bbe8f48452"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 36, 239, 5, 174, 75, 26, 95, 208, 175, 112, 46, 161, 54, 48, 140, 119, 156, 171, 162, 202, 120, 161, 233, 220, 1, 136, 58, 181, 149, 170, 83, 173, 36, 114, 73, 178, 126, 255, 39, 246, 147, 50, 64, 145, 85, 100, 71, 153, 176, 15, 145, 155, 183, 170, 203, 90, 87, 37, 176, 151, 163, 186, 61, 130, 242, 211, 132, 153, 163, 58, 102, 115, 179, 50, 149, 47, 168, 247, 19, 88, 48, 216, 105, 95, 89, 199, 190, 67, 250, 128, 75, 236, 41, 89, 219, 170, 167, 54, 24, 138, 57, 26, 65, 127, 27, 109, 100, 134, 243, 84, 113, 240, 115, 1, 93, 142, 69, 58, 170, 81, 212, 35, 124, 25, 196, 54, 223, 128, 161, 98, 10, 62, 180, 59, 115, 106, 23, 38, 150, 95, 66, 162, 46, 103, 201, 219, 41, 85, 133, 43, 130, 97, 238, 77, 16, 109, 95, 47, 220, 216, 230, 65, 161, 137, 175, 161, 120, 50, 93, 220, 138, 58, 52, 60, 44, 64, 25, 89, 35, 130, 221, 252, 76, 204, 113, 132, 213, 60, 145, 194, 112, 163, 232, 115, 99, 112, 46, 69, 252, 189, 89, 111, 65, 232, 153, 236, 230, 153, 88, 124, 65, 194, 239, 31, 186, 139, 105, 134, 171, 72, 125, 84, 77, 131, 105, 177, 138, 133, 159, 218, 95, 202, 51, 63, 142, 84, 113, 184, 41, 60, 64, 218, 12, 199, 158, 243, 205, 24, 75, 67, 24, 68, 131, 24, 210, 142, 219, 146, 255, 167, 253, 71, 148, 138, 198, 224, 184, 185, 156, 149, 174, 227, 34, 74, 125, 231, 221, 163, 41, 247, 130, 55, 83, 94, 134, 181, 214, 214, 145, 41, 108, 198, 85, 39, 213, 16, 7, 37, 14, 112 },
                            ProductLineId = new Guid("86270182-e13d-4b79-8f72-7ac7e569bdc5"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("45d75998-6a68-47be-b24e-26deb09e0c71"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 185, 96, 54, 243, 137, 0, 25, 96, 198, 228, 235, 189, 134, 235, 73, 93, 155, 5, 94, 86, 107, 72, 125, 130, 185, 9, 229, 80, 255, 12, 222, 194, 111, 108, 96, 236, 54, 29, 179, 129, 182, 230, 139, 125, 32, 197, 207, 219, 81, 103, 58, 18, 11, 168, 206, 29, 147, 227, 160, 232, 113, 106, 122, 219, 140, 43, 7, 186, 17, 205, 229, 241, 96, 34, 82, 18, 230, 162, 111, 176, 5, 142, 207, 142, 249, 29, 130, 36, 74, 166, 79, 182, 183, 244, 81, 244, 183, 226, 216, 163, 132, 101, 131, 126, 22, 203, 76, 36, 167, 57, 19, 159, 162, 95, 118, 136, 229, 23, 11, 110, 244, 14, 189, 187, 19, 2, 13, 149, 238, 199, 92, 126, 162, 220, 216, 121, 157, 147, 60, 156, 221, 207, 136, 156, 208, 255, 219, 160, 216, 107, 146, 181, 127, 147, 170, 193, 99, 161, 23, 165, 21, 137, 107, 114, 202, 85, 42, 193, 139, 81, 91, 19, 110, 114, 3, 151, 163, 11, 153, 221, 8, 80, 227, 76, 125, 78, 159, 49, 255, 120, 176, 40, 134, 51, 39, 168, 16, 113, 124, 39, 14, 174, 213, 132, 242, 219, 114, 142, 42, 86, 192, 153, 220, 20, 160, 15, 246, 71, 103, 31, 153, 137, 229, 155, 20, 219, 0, 204, 145, 242, 200, 73, 36, 47, 218, 169, 211, 29, 5, 137, 234, 74, 28, 59, 101, 206, 74, 188, 238, 70, 58, 225, 141, 115, 103, 126, 125, 240, 127, 161, 57, 112, 168, 81, 109, 95, 191, 165, 3, 193, 226, 239, 229, 195, 94, 2, 108, 236, 197, 60, 70, 220, 194, 55, 16, 158, 245, 179, 100, 139, 169, 169, 139, 249, 33, 172, 127, 41, 203, 128 },
                            ProductLineId = new Guid("11bd0f6a-68c2-4004-a3da-2049e9eb1198"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("610ecb21-804e-45fd-8efe-b836f4673dde"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 66, 25, 85, 191, 228, 129, 165, 49, 43, 117, 109, 189, 20, 78, 149, 134, 14, 123, 101, 107, 136, 197, 181, 101, 11, 131, 175, 106, 12, 140, 39, 84, 226, 77, 56, 71, 145, 125, 132, 238, 250, 147, 53, 115, 53, 64, 173, 37, 190, 167, 153, 43, 78, 179, 137, 70, 89, 120, 250, 149, 138, 114, 247, 134, 101, 186, 99, 77, 159, 151, 55, 68, 87, 199, 157, 212, 100, 100, 129, 214, 227, 185, 84, 82, 70, 157, 234, 163, 201, 20, 142, 47, 195, 183, 99, 38, 136, 233, 195, 82, 155, 224, 220, 239, 150, 18, 228, 115, 191, 142, 202, 65, 101, 118, 70, 221, 233, 2, 121, 19, 62, 213, 127, 2, 75, 183, 86, 138, 251, 221, 106, 27, 131, 92, 89, 81, 114, 142, 134, 136, 31, 72, 195, 240, 18, 178, 202, 86, 243, 214, 124, 11, 163, 155, 32, 60, 141, 92, 175, 159, 85, 109, 181, 116, 132, 54, 130, 244, 60, 63, 201, 209, 235, 209, 84, 124, 54, 230, 179, 75, 41, 107, 217, 164, 152, 20, 13, 167, 221, 89, 116, 244, 238, 136, 238, 207, 32, 96, 150, 179, 114, 59, 48, 173, 163, 128, 23, 126, 198, 8, 216, 176, 230, 74, 127, 215, 46, 134, 123, 179, 145, 3, 42, 46, 15, 53, 93, 115, 30, 239, 162, 61, 232, 80, 245, 229, 152, 29, 96, 116, 137, 7, 112, 89, 223, 169, 130, 17, 146, 37, 240, 178, 143, 112, 67, 206, 2, 160, 67, 100, 102, 231, 2, 130, 232, 167, 254, 12, 224, 120, 187, 86, 207, 106, 90, 39, 87, 169, 88, 30, 71, 254, 63, 67, 40, 123, 250, 9, 185, 79, 236, 222, 175, 104, 53, 16, 113, 182, 236, 70 },
                            ProductLineId = new Guid("2410521a-0b2c-4036-8450-e08ea13d3f4b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("78b101aa-9dbc-4b47-a9ae-9d8b52beb1ce"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 145, 117, 2, 105, 194, 210, 205, 101, 60, 184, 136, 245, 205, 226, 204, 2, 196, 119, 158, 56, 101, 189, 77, 192, 192, 126, 198, 214, 26, 30, 244, 226, 218, 224, 77, 158, 85, 17, 18, 15, 106, 209, 182, 158, 141, 1, 218, 201, 91, 4, 233, 222, 99, 142, 202, 242, 117, 87, 48, 129, 196, 3, 35, 79, 84, 194, 85, 242, 100, 247, 27, 244, 51, 114, 26, 130, 61, 254, 231, 125, 178, 172, 76, 88, 96, 18, 136, 153, 110, 255, 131, 250, 236, 41, 40, 24, 216, 104, 97, 136, 70, 177, 47, 243, 3, 253, 171, 160, 103, 202, 147, 15, 216, 158, 73, 239, 3, 138, 100, 9, 50, 23, 39, 41, 26, 10, 214, 213, 44, 67, 66, 123, 80, 83, 235, 23, 212, 188, 203, 33, 9, 7, 40, 149, 45, 92, 164, 184, 45, 40, 166, 235, 196, 102, 198, 103, 150, 105, 141, 36, 141, 178, 199, 244, 65, 113, 113, 52, 39, 190, 43, 142, 0, 249, 210, 83, 177, 84, 88, 135, 77, 101, 48, 78, 187, 200, 15, 4, 236, 71, 219, 92, 55, 90, 183, 33, 8, 6, 61, 176, 219, 197, 179, 191, 99, 237, 245, 159, 60, 225, 195, 169, 244, 201, 215, 13, 54, 238, 88, 145, 180, 109, 51, 47, 152, 41, 18, 97, 254, 29, 49, 151, 169, 191, 129, 255, 94, 159, 30, 255, 57, 13, 107, 177, 41, 187, 45, 203, 3, 253, 4, 229, 175, 11, 217, 113, 3, 196, 170, 212, 57, 53, 116, 35, 243, 56, 186, 85, 185, 178, 240, 119, 41, 124, 146, 213, 102, 76, 55, 101, 241, 112, 145, 7, 98, 102, 163, 187, 180, 185, 12, 234, 188, 71, 205, 104, 206, 199, 193, 83 },
                            ProductLineId = new Guid("8de00c4c-0a35-4a01-ba7a-b980e99950c4"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("54fffc2a-837b-448e-a0d0-4d8ed3df13f6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 240, 142, 161, 199, 42, 80, 129, 238, 141, 248, 20, 74, 27, 224, 185, 105, 226, 82, 116, 75, 197, 248, 243, 250, 21, 149, 29, 226, 78, 126, 2, 235, 234, 36, 126, 33, 142, 30, 83, 159, 138, 191, 83, 11, 219, 221, 127, 8, 100, 233, 207, 20, 10, 76, 73, 153, 239, 209, 103, 28, 169, 174, 22, 27, 152, 50, 154, 161, 189, 192, 234, 14, 205, 224, 191, 254, 47, 71, 241, 138, 29, 198, 135, 180, 206, 43, 22, 14, 55, 33, 179, 12, 156, 255, 154, 73, 232, 17, 68, 142, 251, 53, 100, 199, 178, 151, 120, 32, 97, 171, 99, 185, 109, 107, 126, 155, 174, 55, 199, 143, 119, 87, 137, 31, 122, 242, 71, 12, 55, 31, 22, 166, 226, 50, 24, 16, 200, 212, 179, 82, 178, 230, 157, 137, 122, 94, 230, 103, 123, 176, 132, 145, 50, 13, 3, 24, 222, 173, 216, 192, 88, 93, 57, 142, 139, 101, 91, 221, 142, 2, 45, 99, 36, 245, 186, 43, 145, 222, 23, 112, 40, 246, 172, 147, 99, 237, 220, 188, 229, 124, 214, 73, 52, 154, 181, 252, 28, 104, 167, 108, 89, 47, 131, 75, 84, 84, 22, 203, 161, 112, 139, 194, 141, 62, 158, 198, 28, 45, 114, 27, 165, 132, 191, 73, 28, 151, 16, 47, 48, 187, 12, 12, 86, 188, 131, 149, 188, 170, 191, 76, 196, 32, 226, 136, 214, 76, 23, 7, 87, 201, 148, 253, 162, 108, 101, 7, 119, 100, 170, 35, 107, 144, 214, 103, 92, 1, 134, 248, 243, 100, 203, 120, 85, 47, 210, 205, 233, 236, 99, 9, 226, 200, 57, 41, 14, 45, 58, 95, 212, 151, 221, 221, 192, 215, 86, 254, 208, 73, 162, 16 },
                            ProductLineId = new Guid("86270182-e13d-4b79-8f72-7ac7e569bdc5"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<OrderStatus>("OrderStatus")
                        .HasColumnType("order_status")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId", "OrderId")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Inventory")
                        .HasColumnType("integer")
                        .HasColumnName("inventory");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<Guid>("ProductSizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_size_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_products_product_line_id");

                    b.HasIndex("ProductSizeId")
                        .HasDatabaseName("ix_products_product_size_id");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c40a979c-6e0d-4381-a56f-d3ab58868f6f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("11bd0f6a-68c2-4004-a3da-2049e9eb1198"),
                            ProductSizeId = new Guid("817bad0e-e62c-4f5a-9812-80669850ab6e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2d59db21-9d76-4426-a415-36302eb7fdab"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("11bd0f6a-68c2-4004-a3da-2049e9eb1198"),
                            ProductSizeId = new Guid("7dca52b3-4a21-4043-a1b0-81fa868b100a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d4f4513a-9f4a-46a5-be8e-64c16f5a6166"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("11bd0f6a-68c2-4004-a3da-2049e9eb1198"),
                            ProductSizeId = new Guid("d8c47711-bb29-4b50-8cb7-d74bf6c89f3f"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a52637a6-4e2c-4ea9-80c5-ccbcc0291854"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("11bd0f6a-68c2-4004-a3da-2049e9eb1198"),
                            ProductSizeId = new Guid("3f11df1b-3508-4344-8fa8-f95e3c6f4fdb"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d6206a96-5758-4fe8-be7b-52b175403f30"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("2410521a-0b2c-4036-8450-e08ea13d3f4b"),
                            ProductSizeId = new Guid("817bad0e-e62c-4f5a-9812-80669850ab6e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c1b37818-a4b7-4bfa-bbc1-47540ea2ae2b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("2410521a-0b2c-4036-8450-e08ea13d3f4b"),
                            ProductSizeId = new Guid("7dca52b3-4a21-4043-a1b0-81fa868b100a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fc6cc521-185e-461a-8ad3-3fedbe6bc04b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("2410521a-0b2c-4036-8450-e08ea13d3f4b"),
                            ProductSizeId = new Guid("d8c47711-bb29-4b50-8cb7-d74bf6c89f3f"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5e110d7a-d926-42da-a126-6c28d7225b5a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("2410521a-0b2c-4036-8450-e08ea13d3f4b"),
                            ProductSizeId = new Guid("3f11df1b-3508-4344-8fa8-f95e3c6f4fdb"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e238ca9f-4ac0-4095-8888-3ff8e248d821"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("8de00c4c-0a35-4a01-ba7a-b980e99950c4"),
                            ProductSizeId = new Guid("817bad0e-e62c-4f5a-9812-80669850ab6e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("616bfb0d-a243-437f-acf5-0a2a2f547ad2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("8de00c4c-0a35-4a01-ba7a-b980e99950c4"),
                            ProductSizeId = new Guid("7dca52b3-4a21-4043-a1b0-81fa868b100a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d08f9837-b54c-4350-98b7-bb1c5aa44e75"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("8de00c4c-0a35-4a01-ba7a-b980e99950c4"),
                            ProductSizeId = new Guid("d8c47711-bb29-4b50-8cb7-d74bf6c89f3f"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("088cd42b-8266-49ee-8823-3f52e412355d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("8de00c4c-0a35-4a01-ba7a-b980e99950c4"),
                            ProductSizeId = new Guid("3f11df1b-3508-4344-8fa8-f95e3c6f4fdb"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("87f022b9-a418-4066-86fa-36b7782486dc"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("86270182-e13d-4b79-8f72-7ac7e569bdc5"),
                            ProductSizeId = new Guid("817bad0e-e62c-4f5a-9812-80669850ab6e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("658a4956-09a7-43b6-8c55-cd322e06f421"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("86270182-e13d-4b79-8f72-7ac7e569bdc5"),
                            ProductSizeId = new Guid("7dca52b3-4a21-4043-a1b0-81fa868b100a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5ad46613-3eb1-498d-ad83-05c962b8a8df"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("86270182-e13d-4b79-8f72-7ac7e569bdc5"),
                            ProductSizeId = new Guid("d8c47711-bb29-4b50-8cb7-d74bf6c89f3f"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5a0fbbfd-a3ef-4c13-b070-9d04e838d11b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("86270182-e13d-4b79-8f72-7ac7e569bdc5"),
                            ProductSizeId = new Guid("3f11df1b-3508-4344-8fa8-f95e3c6f4fdb"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3247b4c4-d1d3-463a-ab30-084661e1bfa4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("86270182-e13d-4b79-8f72-7ac7e569bdc5"),
                            ProductSizeId = new Guid("817bad0e-e62c-4f5a-9812-80669850ab6e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("40736d2d-1ed5-4e7f-a9a0-c6ff99019cf7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("86270182-e13d-4b79-8f72-7ac7e569bdc5"),
                            ProductSizeId = new Guid("7dca52b3-4a21-4043-a1b0-81fa868b100a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4d34e67f-9011-436a-a99b-40cc8d4d2d25"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("86270182-e13d-4b79-8f72-7ac7e569bdc5"),
                            ProductSizeId = new Guid("d8c47711-bb29-4b50-8cb7-d74bf6c89f3f"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3b2a1f22-c1f5-4f05-bf48-41a56a95ff74"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("86270182-e13d-4b79-8f72-7ac7e569bdc5"),
                            ProductSizeId = new Guid("3f11df1b-3508-4344-8fa8-f95e3c6f4fdb"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_line");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_product_line_category_id");

                    b.ToTable("product_line", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11bd0f6a-68c2-4004-a3da-2049e9eb1198"),
                            CategoryId = new Guid("306c9811-6a32-4ed6-b7b1-291ca1318ddc"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A comfortable and stylish cotton T-shirt.",
                            Price = 19.99m,
                            Title = "Cotton T-Shirt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2410521a-0b2c-4036-8450-e08ea13d3f4b"),
                            CategoryId = new Guid("f48237cd-7881-488c-bd09-0a7221b8ab9a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Slim fit jeans for a modern look.",
                            Price = 49.99m,
                            Title = "Slim Fit Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8de00c4c-0a35-4a01-ba7a-b980e99950c4"),
                            CategoryId = new Guid("f282c2ad-ba0d-42cc-bb58-5a48f219dec6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A floral summer dress for any occasion.",
                            Price = 29.99m,
                            Title = "Summer Dress",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("86270182-e13d-4b79-8f72-7ac7e569bdc5"),
                            CategoryId = new Guid("35a617d8-e3df-4b9a-b48f-2718ff6e6339"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Casual sneakers for everyday wear.",
                            Price = 39.99m,
                            Title = "Sneakers",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7533070f-eab2-4f41-8262-a885eea1b88a"),
                            CategoryId = new Guid("73c08787-5db5-454a-ba21-4652a72582b7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Classic leather belt to complete your look.",
                            Price = 14.99m,
                            Title = "Leather Belt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_product_size");

                    b.ToTable("product_size", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("817bad0e-e62c-4f5a-9812-80669850ab6e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 32
                        },
                        new
                        {
                            Id = new Guid("7dca52b3-4a21-4043-a1b0-81fa868b100a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 34
                        },
                        new
                        {
                            Id = new Guid("d8c47711-bb29-4b50-8cb7-d74bf6c89f3f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 36
                        },
                        new
                        {
                            Id = new Guid("3f11df1b-3508-4344-8fa8-f95e3c6f4fdb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 38
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_reviews_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Role>("Role")
                        .HasColumnType("role")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("12e02f21-88b6-4a89-a701-f56f3641b328"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@mail.com",
                            FirstName = "JohnAdmin",
                            LastName = "Doe",
                            Password = "71b7a99f9a73695fba66af750af6032e970589097295c43d8be62a18e31d79a3",
                            Role = Role.Admin,
                            Salt = new byte[] { 218, 166, 190, 5, 10, 105, 169, 208, 163, 37, 7, 86, 87, 240, 183, 112, 228, 123, 45, 58, 250, 41, 142, 99, 71, 87, 249, 184, 55, 253, 133, 53, 27, 34, 194, 59, 187, 163, 97, 151, 9, 205, 246, 198, 157, 36, 16, 245, 201, 253, 169, 245, 206, 46, 33, 204, 247, 226, 252, 129, 84, 185, 164, 56 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a9bca7dc-b115-4c15-83f3-819a6fc700b4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer@mail.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Password = "58728ebf4568e32009588e8beb8d933833b9018bcc209a72bddb771a910000c7",
                            Role = Role.Customer,
                            Salt = new byte[] { 182, 208, 148, 50, 52, 96, 149, 186, 159, 190, 9, 255, 248, 80, 144, 225, 248, 141, 206, 182, 70, 216, 184, 75, 236, 45, 87, 127, 70, 203, 68, 20, 83, 46, 67, 229, 202, 141, 21, 99, 140, 155, 135, 197, 30, 148, 240, 151, 65, 95, 214, 186, 62, 103, 25, 205, 10, 224, 34, 144, 199, 187, 58, 237 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Address")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Avatar")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Avatar", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_avatar_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_product_line_product_line_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Order", null)
                        .WithMany("orderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", "ProductLine")
                        .WithMany()
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_product_line_product_line_id");

                    b.HasOne("Ecommerce.Core.src.Entities.ProductSize", "ProductSize")
                        .WithMany("Products")
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_product_size_product_size_id");

                    b.Navigation("ProductLine");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Category", "Category")
                        .WithMany("ProductLines")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_line_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_products_product_id");

                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Navigation("ProductLines");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Avatar")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
