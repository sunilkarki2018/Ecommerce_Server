// <auto-generated />
using System;
using Ecommerce.Core.src.Entities;
using Ecommerce.WebAPI.src.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.WebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", new[] { "registered", "delivered", "canceled", "pending" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "admin", "customer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("house_number");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_address_user_id");

                    b.ToTable("address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e34f68dc-3370-4765-9adf-c7b854cd47f8"),
                            City = "Cityville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "123",
                            PostCode = "12345",
                            Street = "Main St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("363027b3-4251-4411-a93d-5784045006a2")
                        },
                        new
                        {
                            Id = new Guid("61a4dbf0-4cd5-40de-81d6-b3c1f9d7e2bf"),
                            City = "Townsville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "456",
                            PostCode = "67890",
                            Street = "Oak St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("f2a0a70e-1d0e-45c4-86eb-cfacc304cb18")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_avatar");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_avatar_user_id");

                    b.ToTable("avatar", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8c75153-d1e5-49be-9d24-4bd02f5d2933"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 4, 5, 6 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("363027b3-4251-4411-a93d-5784045006a2")
                        },
                        new
                        {
                            Id = new Guid("42edf41d-a8d6-4c22-8b55-f4e20d200cd2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 10, 11, 12 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("f2a0a70e-1d0e-45c4-86eb-cfacc304cb18")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("187ec2fa-6bad-45e9-94d5-61063414a173"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "tshirts.jpg",
                            Name = "T-Shirts",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c29d6ca2-befd-4eec-b945-004e4f2a91c8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "jeans.jpg",
                            Name = "Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a595407c-a619-4596-9d8c-91f69e77044a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "dresses.jpg",
                            Name = "Dresses",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c7311b14-c623-40be-a2fc-b7b39c0e0cf3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "footwear.jpg",
                            Name = "Footwear",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2d4bbf01-ca46-4416-808f-c38311c8fb20"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "accessories.jpg",
                            Name = "Accessories",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_image");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_image_product_line_id");

                    b.ToTable("image", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d1b0cfc-265d-4a27-9970-7921b9b2ec3c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 26, 91, 242, 57, 142, 84, 39, 107, 227, 246, 18, 214, 133, 20, 96, 20, 226, 218, 235, 0, 226, 176, 96, 72, 208, 225, 201, 12, 83, 138, 48, 48, 43, 65, 21, 60, 124, 159, 232, 115, 179, 65, 229, 197, 9, 249, 231, 97, 63, 204, 148, 215, 177, 188, 48, 203, 138, 169, 15, 21, 91, 11, 121, 58, 78, 128, 204, 205, 194, 242, 76, 87, 209, 252, 43, 213, 248, 135, 226, 186, 62, 48, 8, 91, 184, 35, 136, 194, 79, 31, 172, 176, 116, 55, 245, 112, 28, 217, 17, 142, 249, 120, 55, 115, 132, 170, 139, 168, 123, 91, 96, 65, 212, 113, 206, 221, 167, 153, 9, 174, 183, 98, 11, 200, 18, 235, 1, 22, 124, 249, 61, 62, 164, 205, 36, 121, 243, 228, 133, 122, 105, 230, 157, 228, 130, 252, 1, 192, 223, 77, 131, 169, 171, 135, 180, 87, 141, 218, 221, 207, 206, 228, 198, 161, 77, 245, 82, 123, 230, 230, 55, 159, 49, 177, 82, 69, 50, 226, 14, 34, 122, 155, 116, 0, 244, 61, 131, 147, 22, 55, 12, 133, 232, 170, 58, 147, 163, 70, 21, 61, 23, 213, 34, 58, 207, 168, 176, 32, 61, 224, 47, 18, 240, 85, 126, 199, 196, 123, 15, 239, 187, 131, 159, 211, 75, 154, 80, 136, 108, 153, 94, 5, 237, 182, 6, 30, 200, 196, 72, 105, 19, 47, 29, 240, 45, 135, 158, 133, 130, 65, 130, 194, 20, 45, 171, 236, 18, 208, 247, 165, 142, 180, 64, 174, 3, 2, 9, 255, 217, 115, 222, 100, 176, 46, 129, 60, 193, 212, 171, 132, 61, 3, 203, 81, 170, 184, 163, 184, 250, 223, 185, 239, 54, 65, 243, 184, 4, 246, 194, 19 },
                            ProductLineId = new Guid("a83593d3-7308-4fd5-be7d-fcdca7c3d6b2"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0ff8e0d6-7c36-479b-b833-578f319cf9d7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 201, 254, 49, 84, 186, 162, 120, 18, 106, 200, 133, 70, 213, 236, 199, 244, 15, 150, 180, 181, 217, 7, 246, 30, 49, 57, 252, 226, 238, 104, 123, 86, 163, 57, 63, 130, 119, 99, 149, 30, 18, 88, 22, 246, 235, 144, 69, 72, 92, 214, 83, 187, 16, 211, 66, 89, 244, 48, 77, 119, 12, 59, 77, 106, 32, 35, 168, 15, 216, 234, 80, 82, 237, 157, 15, 135, 72, 92, 178, 163, 227, 9, 14, 142, 113, 74, 83, 67, 90, 97, 209, 43, 149, 131, 220, 232, 162, 143, 7, 11, 95, 211, 17, 246, 18, 117, 177, 190, 20, 215, 30, 135, 171, 93, 234, 42, 152, 56, 151, 59, 114, 152, 132, 47, 30, 84, 167, 131, 253, 40, 176, 90, 244, 85, 37, 225, 65, 201, 149, 29, 64, 138, 190, 112, 65, 220, 202, 51, 36, 27, 44, 180, 176, 201, 140, 67, 242, 37, 17, 249, 22, 95, 206, 118, 107, 25, 28, 73, 50, 241, 219, 161, 128, 230, 55, 135, 248, 12, 92, 237, 10, 132, 173, 18, 181, 189, 242, 99, 112, 170, 34, 46, 139, 82, 202, 144, 212, 29, 135, 104, 114, 106, 220, 80, 243, 122, 111, 214, 222, 155, 86, 77, 85, 54, 181, 22, 46, 82, 92, 254, 109, 126, 240, 15, 178, 2, 206, 174, 132, 222, 170, 200, 120, 42, 187, 61, 179, 30, 79, 88, 35, 131, 22, 207, 133, 209, 112, 97, 78, 100, 137, 31, 205, 211, 161, 37, 244, 218, 246, 6, 191, 113, 117, 48, 190, 126, 236, 227, 187, 26, 106, 52, 25, 74, 95, 150, 202, 23, 210, 185, 3, 149, 88, 223, 115, 163, 39, 5, 14, 69, 65, 208, 252, 121, 76, 93, 187, 225, 77, 221 },
                            ProductLineId = new Guid("48504ee9-342d-4eef-b881-2a8ec6caec73"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b88015fe-b66d-4d3d-af3d-ac6824ecfa8a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 205, 227, 205, 170, 189, 179, 123, 72, 141, 10, 185, 237, 81, 124, 200, 141, 239, 37, 255, 71, 254, 190, 73, 72, 123, 36, 150, 225, 122, 166, 42, 90, 49, 233, 217, 175, 60, 60, 62, 5, 232, 90, 39, 230, 173, 49, 13, 89, 16, 241, 117, 191, 7, 5, 59, 37, 153, 73, 19, 77, 198, 154, 228, 249, 112, 149, 195, 180, 94, 87, 88, 84, 198, 96, 86, 88, 39, 254, 168, 96, 188, 154, 78, 180, 72, 31, 179, 245, 72, 32, 176, 30, 117, 114, 210, 75, 64, 133, 62, 150, 76, 36, 212, 82, 71, 1, 15, 79, 141, 25, 102, 144, 238, 111, 190, 126, 195, 223, 80, 60, 113, 81, 88, 68, 141, 213, 242, 235, 125, 43, 30, 214, 229, 142, 230, 75, 38, 226, 224, 98, 212, 151, 130, 0, 19, 38, 156, 174, 11, 179, 49, 252, 178, 251, 246, 231, 107, 126, 55, 154, 93, 255, 125, 231, 249, 172, 46, 5, 45, 246, 69, 181, 17, 55, 168, 233, 114, 51, 71, 26, 183, 53, 176, 139, 179, 36, 218, 23, 160, 48, 150, 81, 162, 45, 252, 30, 25, 138, 147, 211, 55, 74, 144, 229, 121, 253, 255, 79, 186, 250, 146, 11, 240, 61, 147, 20, 118, 221, 149, 99, 229, 35, 12, 69, 61, 155, 85, 141, 84, 80, 194, 1, 180, 44, 17, 64, 144, 213, 153, 243, 66, 181, 44, 39, 60, 198, 41, 118, 185, 145, 25, 242, 177, 207, 222, 240, 122, 97, 63, 18, 208, 167, 207, 252, 18, 244, 1, 80, 21, 222, 184, 8, 207, 99, 37, 240, 74, 7, 106, 37, 1, 186, 99, 219, 186, 4, 149, 227, 87, 136, 58, 180, 195, 70, 84, 165, 202, 249, 97, 160 },
                            ProductLineId = new Guid("7869fc83-c6ef-4198-9f5d-c4b82c1aa74c"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b523f540-88d3-4ed2-908c-0128337bfcc2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 203, 149, 112, 95, 175, 239, 59, 65, 219, 35, 234, 224, 67, 99, 196, 179, 62, 198, 168, 196, 23, 12, 167, 157, 73, 212, 196, 117, 185, 244, 26, 255, 226, 96, 186, 0, 229, 69, 154, 79, 126, 94, 4, 209, 222, 111, 239, 87, 43, 25, 231, 77, 170, 84, 236, 54, 180, 115, 131, 30, 202, 243, 223, 212, 206, 40, 32, 212, 194, 145, 98, 3, 254, 223, 13, 81, 45, 223, 53, 255, 70, 205, 141, 94, 94, 62, 115, 160, 118, 193, 111, 201, 253, 189, 163, 77, 154, 110, 185, 230, 122, 123, 226, 66, 241, 100, 225, 60, 28, 128, 245, 65, 91, 40, 196, 179, 190, 101, 22, 77, 186, 61, 203, 160, 230, 188, 118, 180, 232, 26, 66, 106, 243, 87, 115, 195, 119, 83, 44, 22, 137, 156, 170, 173, 14, 207, 251, 222, 248, 203, 242, 227, 159, 54, 38, 45, 45, 130, 48, 14, 135, 155, 125, 157, 76, 97, 34, 38, 168, 97, 83, 39, 9, 171, 102, 102, 58, 53, 178, 223, 34, 148, 169, 27, 95, 183, 167, 245, 14, 215, 41, 67, 201, 52, 21, 227, 69, 148, 11, 184, 177, 244, 107, 189, 106, 25, 19, 97, 192, 215, 163, 250, 156, 143, 195, 76, 54, 102, 144, 106, 173, 132, 105, 129, 85, 205, 68, 182, 4, 35, 53, 6, 163, 205, 193, 156, 215, 41, 80, 113, 239, 5, 222, 100, 171, 93, 89, 58, 116, 176, 253, 12, 40, 251, 124, 109, 68, 204, 142, 30, 229, 9, 188, 216, 244, 84, 42, 21, 28, 125, 34, 205, 203, 93, 67, 108, 174, 245, 2, 243, 22, 150, 142, 177, 11, 60, 27, 23, 214, 212, 92, 104, 86, 233, 107, 18, 116, 190, 241, 45 },
                            ProductLineId = new Guid("187bb835-d038-4e6b-bb42-feda95732989"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("24a4a3e6-4ae9-4121-9c91-0e8358c31df1"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 226, 201, 234, 136, 133, 55, 236, 0, 114, 16, 44, 214, 147, 174, 35, 33, 115, 22, 230, 238, 61, 166, 82, 127, 10, 14, 51, 112, 86, 152, 194, 122, 137, 217, 247, 6, 194, 116, 44, 87, 17, 84, 244, 128, 235, 73, 160, 184, 247, 170, 75, 38, 68, 125, 102, 167, 135, 114, 181, 46, 102, 111, 30, 238, 226, 198, 58, 32, 118, 49, 198, 157, 243, 133, 237, 95, 183, 47, 191, 6, 20, 166, 4, 23, 119, 25, 81, 155, 14, 129, 91, 65, 163, 147, 146, 72, 148, 147, 10, 3, 212, 43, 30, 172, 23, 102, 211, 182, 123, 242, 65, 75, 160, 41, 158, 250, 150, 53, 109, 180, 155, 50, 254, 195, 252, 201, 58, 189, 253, 188, 76, 75, 178, 7, 170, 0, 76, 223, 73, 148, 76, 106, 82, 168, 158, 25, 172, 149, 70, 116, 161, 80, 119, 29, 192, 247, 73, 217, 34, 93, 190, 225, 147, 91, 63, 2, 102, 117, 91, 210, 44, 47, 50, 250, 63, 49, 114, 20, 140, 74, 57, 192, 35, 247, 242, 237, 240, 226, 41, 251, 229, 82, 244, 213, 113, 173, 226, 182, 224, 198, 0, 188, 209, 49, 121, 79, 22, 154, 234, 191, 0, 250, 227, 49, 221, 224, 12, 230, 69, 58, 120, 122, 204, 80, 106, 214, 187, 240, 136, 66, 60, 19, 155, 198, 38, 98, 153, 254, 151, 75, 146, 167, 1, 243, 161, 35, 88, 144, 156, 190, 231, 159, 13, 38, 172, 185, 60, 211, 192, 86, 254, 57, 56, 20, 137, 246, 176, 34, 177, 29, 195, 23, 172, 33, 20, 80, 121, 102, 252, 246, 181, 126, 19, 32, 208, 253, 19, 193, 53, 225, 140, 154, 159, 197, 244, 38, 66, 63, 41, 240 },
                            ProductLineId = new Guid("a83593d3-7308-4fd5-be7d-fcdca7c3d6b2"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cfc33a63-0f4b-436f-b962-cb89200c5107"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 43, 105, 180, 56, 142, 245, 102, 74, 187, 194, 174, 15, 117, 33, 223, 82, 183, 118, 194, 129, 229, 230, 179, 186, 105, 148, 61, 176, 153, 109, 156, 249, 149, 185, 78, 120, 185, 111, 44, 140, 107, 183, 243, 142, 114, 216, 74, 13, 11, 80, 252, 101, 61, 230, 248, 24, 126, 232, 24, 32, 58, 26, 179, 114, 88, 5, 140, 172, 168, 31, 135, 173, 128, 204, 224, 121, 123, 183, 101, 6, 120, 201, 118, 207, 12, 98, 146, 62, 120, 133, 70, 247, 25, 139, 8, 231, 144, 209, 33, 46, 118, 24, 19, 130, 98, 162, 185, 206, 167, 134, 56, 237, 195, 210, 212, 36, 94, 4, 207, 239, 50, 8, 141, 161, 204, 74, 156, 101, 40, 106, 82, 162, 244, 231, 194, 167, 194, 79, 27, 226, 234, 64, 108, 222, 188, 64, 148, 178, 192, 196, 132, 112, 184, 15, 83, 62, 102, 112, 96, 89, 14, 200, 52, 72, 173, 137, 252, 212, 233, 167, 246, 83, 2, 140, 42, 222, 4, 69, 192, 23, 194, 188, 243, 168, 103, 90, 94, 58, 53, 132, 34, 223, 189, 28, 226, 201, 235, 20, 77, 47, 99, 124, 184, 117, 162, 93, 162, 129, 66, 59, 65, 53, 21, 81, 59, 36, 138, 112, 213, 153, 201, 138, 14, 231, 115, 227, 207, 225, 243, 97, 78, 47, 101, 37, 102, 157, 121, 60, 48, 237, 183, 255, 161, 42, 202, 234, 165, 182, 69, 62, 18, 4, 43, 27, 56, 114, 234, 145, 204, 52, 233, 46, 197, 0, 37, 177, 46, 109, 159, 14, 86, 108, 253, 220, 220, 196, 145, 164, 90, 145, 111, 213, 236, 6, 138, 234, 139, 251, 202, 100, 234, 131, 75, 2, 153, 78, 24, 18, 101, 172 },
                            ProductLineId = new Guid("48504ee9-342d-4eef-b881-2a8ec6caec73"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("17a51043-a7cf-413a-8196-8056da7d770e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 58, 216, 118, 20, 98, 129, 10, 115, 97, 10, 98, 141, 25, 192, 184, 211, 165, 214, 207, 96, 253, 67, 224, 219, 83, 120, 137, 166, 167, 246, 8, 160, 145, 36, 145, 129, 212, 92, 77, 241, 117, 129, 102, 120, 140, 117, 228, 70, 127, 50, 226, 25, 238, 146, 179, 214, 164, 242, 198, 161, 132, 162, 236, 179, 242, 180, 166, 158, 214, 129, 25, 241, 195, 187, 81, 97, 147, 29, 212, 178, 163, 3, 127, 94, 121, 153, 7, 124, 224, 2, 188, 98, 103, 172, 30, 127, 145, 48, 230, 58, 206, 54, 221, 133, 161, 89, 148, 216, 117, 128, 122, 153, 191, 186, 74, 214, 86, 73, 197, 220, 43, 66, 67, 72, 192, 106, 56, 71, 165, 248, 201, 9, 65, 13, 144, 31, 176, 180, 80, 0, 173, 119, 203, 42, 89, 229, 43, 236, 55, 126, 115, 102, 9, 98, 169, 9, 145, 71, 109, 21, 254, 162, 236, 178, 219, 239, 190, 50, 2, 85, 169, 81, 23, 111, 171, 232, 72, 234, 77, 183, 174, 252, 214, 206, 116, 158, 120, 38, 100, 161, 202, 96, 184, 186, 140, 195, 28, 133, 46, 121, 136, 192, 147, 14, 185, 183, 188, 205, 87, 204, 146, 172, 153, 22, 53, 85, 67, 125, 248, 251, 156, 228, 122, 237, 181, 191, 219, 60, 183, 220, 20, 88, 103, 52, 60, 158, 150, 232, 71, 47, 224, 5, 209, 218, 135, 97, 61, 97, 176, 123, 244, 192, 129, 213, 50, 221, 4, 103, 218, 114, 175, 120, 185, 227, 72, 8, 222, 53, 107, 114, 189, 214, 205, 212, 154, 18, 126, 145, 5, 198, 63, 202, 240, 119, 32, 141, 4, 72, 69, 230, 213, 74, 43, 183, 34, 66, 250, 11, 28, 4 },
                            ProductLineId = new Guid("7869fc83-c6ef-4198-9f5d-c4b82c1aa74c"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9e767fcd-3ed8-4dca-9d16-13162f433cbd"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 59, 252, 164, 77, 80, 36, 218, 57, 0, 3, 203, 20, 204, 122, 224, 93, 42, 155, 10, 35, 8, 230, 61, 190, 10, 27, 129, 12, 241, 103, 1, 167, 22, 4, 48, 180, 151, 74, 80, 126, 223, 34, 120, 171, 209, 221, 219, 107, 204, 15, 83, 53, 127, 203, 47, 218, 221, 5, 1, 76, 164, 229, 121, 25, 129, 146, 32, 209, 27, 79, 252, 77, 39, 116, 162, 128, 71, 15, 155, 62, 178, 44, 40, 11, 59, 52, 38, 183, 165, 41, 235, 33, 69, 43, 137, 135, 180, 115, 80, 161, 5, 225, 7, 30, 151, 67, 192, 24, 219, 158, 187, 168, 206, 67, 14, 41, 21, 26, 239, 183, 69, 50, 16, 77, 252, 173, 105, 243, 35, 244, 58, 20, 141, 21, 120, 224, 58, 131, 234, 97, 156, 211, 161, 88, 81, 49, 228, 57, 254, 141, 231, 250, 16, 128, 154, 107, 133, 124, 245, 121, 221, 109, 14, 156, 172, 123, 182, 249, 82, 140, 114, 243, 36, 76, 227, 140, 124, 190, 131, 238, 159, 119, 84, 233, 218, 37, 181, 89, 36, 61, 67, 8, 11, 202, 167, 182, 213, 94, 148, 167, 160, 145, 31, 78, 94, 90, 90, 103, 221, 143, 202, 167, 8, 179, 89, 169, 229, 139, 217, 142, 95, 193, 212, 7, 172, 101, 221, 159, 185, 96, 166, 168, 192, 169, 204, 31, 78, 106, 65, 165, 134, 9, 127, 178, 171, 27, 72, 125, 185, 62, 218, 193, 104, 28, 49, 78, 231, 146, 70, 23, 151, 105, 235, 220, 162, 120, 249, 247, 186, 95, 17, 196, 249, 12, 6, 182, 222, 215, 178, 229, 151, 109, 23, 239, 7, 61, 33, 92, 96, 170, 129, 38, 140, 72, 167, 67, 139, 253, 24, 62 },
                            ProductLineId = new Guid("187bb835-d038-4e6b-bb42-feda95732989"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<OrderStatus>("OrderStatus")
                        .HasColumnType("order_status")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId", "OrderId")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Inventory")
                        .HasColumnType("integer")
                        .HasColumnName("inventory");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<Guid?>("ProductSizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_size_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_products_product_line_id");

                    b.HasIndex("ProductSizeId")
                        .HasDatabaseName("ix_products_product_size_id");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6933273e-4a05-469d-973a-fc4a329e72e5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("a83593d3-7308-4fd5-be7d-fcdca7c3d6b2"),
                            ProductSizeId = new Guid("68e9dfe9-8894-49e5-a6cb-7f94c9a18580"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ab715161-10b9-45cf-adf4-10bc9e2de933"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("a83593d3-7308-4fd5-be7d-fcdca7c3d6b2"),
                            ProductSizeId = new Guid("501e172e-9811-409b-9db9-b9c430533e4c"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("490b7167-9e22-4465-b8b6-7dbfcb198c3d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("a83593d3-7308-4fd5-be7d-fcdca7c3d6b2"),
                            ProductSizeId = new Guid("23686315-2b41-46cd-991f-4799801a971d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("005353d6-1783-465b-9b50-7eb1df2c39a2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("a83593d3-7308-4fd5-be7d-fcdca7c3d6b2"),
                            ProductSizeId = new Guid("6503710f-27a0-49cc-b539-4a05278b16de"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cb54dd87-497d-4be6-a5f9-71ff5afc678b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("48504ee9-342d-4eef-b881-2a8ec6caec73"),
                            ProductSizeId = new Guid("68e9dfe9-8894-49e5-a6cb-7f94c9a18580"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5052667a-c2d5-43d0-9724-00c63a590ebd"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("48504ee9-342d-4eef-b881-2a8ec6caec73"),
                            ProductSizeId = new Guid("501e172e-9811-409b-9db9-b9c430533e4c"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5a3ca82a-4f4a-486c-b9e1-832536f90895"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("48504ee9-342d-4eef-b881-2a8ec6caec73"),
                            ProductSizeId = new Guid("23686315-2b41-46cd-991f-4799801a971d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f56f9080-6a05-4832-8c80-b7b9fbb2f811"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("48504ee9-342d-4eef-b881-2a8ec6caec73"),
                            ProductSizeId = new Guid("6503710f-27a0-49cc-b539-4a05278b16de"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("303bcc22-c2cc-471b-9861-47742d1cda20"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("7869fc83-c6ef-4198-9f5d-c4b82c1aa74c"),
                            ProductSizeId = new Guid("68e9dfe9-8894-49e5-a6cb-7f94c9a18580"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("02061a6f-48b8-47d3-b56c-e02a1c9db693"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("7869fc83-c6ef-4198-9f5d-c4b82c1aa74c"),
                            ProductSizeId = new Guid("501e172e-9811-409b-9db9-b9c430533e4c"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5679329e-d603-4834-a182-97575bdf4e17"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("7869fc83-c6ef-4198-9f5d-c4b82c1aa74c"),
                            ProductSizeId = new Guid("23686315-2b41-46cd-991f-4799801a971d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("367b1ecd-5a80-4ecb-94b9-d85847fa4979"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("7869fc83-c6ef-4198-9f5d-c4b82c1aa74c"),
                            ProductSizeId = new Guid("6503710f-27a0-49cc-b539-4a05278b16de"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("361d0724-7711-4144-bb6b-84eca83d6ecd"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("187bb835-d038-4e6b-bb42-feda95732989"),
                            ProductSizeId = new Guid("68e9dfe9-8894-49e5-a6cb-7f94c9a18580"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e345cb14-6c83-485c-bb6a-35a476bb2874"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("187bb835-d038-4e6b-bb42-feda95732989"),
                            ProductSizeId = new Guid("501e172e-9811-409b-9db9-b9c430533e4c"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8d27dc09-ac63-43d8-8e90-8819f9861066"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("187bb835-d038-4e6b-bb42-feda95732989"),
                            ProductSizeId = new Guid("23686315-2b41-46cd-991f-4799801a971d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("43796251-8328-446b-94bb-cf1476f6f684"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("187bb835-d038-4e6b-bb42-feda95732989"),
                            ProductSizeId = new Guid("6503710f-27a0-49cc-b539-4a05278b16de"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("13f6192e-cf69-426d-bddc-a6dae50d2dcb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("187bb835-d038-4e6b-bb42-feda95732989"),
                            ProductSizeId = new Guid("68e9dfe9-8894-49e5-a6cb-7f94c9a18580"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f0706f56-c277-4b86-a118-fb77bef7e8cb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("187bb835-d038-4e6b-bb42-feda95732989"),
                            ProductSizeId = new Guid("501e172e-9811-409b-9db9-b9c430533e4c"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8c316bbe-237c-4887-b46d-cedc67506b5a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("187bb835-d038-4e6b-bb42-feda95732989"),
                            ProductSizeId = new Guid("23686315-2b41-46cd-991f-4799801a971d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dcf1b834-205f-4d35-af54-fabf61604b0d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("187bb835-d038-4e6b-bb42-feda95732989"),
                            ProductSizeId = new Guid("6503710f-27a0-49cc-b539-4a05278b16de"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_line");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_product_line_category_id");

                    b.ToTable("product_line", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a83593d3-7308-4fd5-be7d-fcdca7c3d6b2"),
                            CategoryId = new Guid("187ec2fa-6bad-45e9-94d5-61063414a173"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A comfortable and stylish cotton T-shirt.",
                            Price = 19.99m,
                            Title = "Cotton T-Shirt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("48504ee9-342d-4eef-b881-2a8ec6caec73"),
                            CategoryId = new Guid("c29d6ca2-befd-4eec-b945-004e4f2a91c8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Slim fit jeans for a modern look.",
                            Price = 49.99m,
                            Title = "Slim Fit Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7869fc83-c6ef-4198-9f5d-c4b82c1aa74c"),
                            CategoryId = new Guid("a595407c-a619-4596-9d8c-91f69e77044a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A floral summer dress for any occasion.",
                            Price = 29.99m,
                            Title = "Summer Dress",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("187bb835-d038-4e6b-bb42-feda95732989"),
                            CategoryId = new Guid("c7311b14-c623-40be-a2fc-b7b39c0e0cf3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Casual sneakers for everyday wear.",
                            Price = 39.99m,
                            Title = "Sneakers",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9c0abb8c-88d0-4922-9c95-36572102fc04"),
                            CategoryId = new Guid("2d4bbf01-ca46-4416-808f-c38311c8fb20"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Classic leather belt to complete your look.",
                            Price = 14.99m,
                            Title = "Leather Belt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_product_size");

                    b.ToTable("product_size", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("68e9dfe9-8894-49e5-a6cb-7f94c9a18580"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 32
                        },
                        new
                        {
                            Id = new Guid("501e172e-9811-409b-9db9-b9c430533e4c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 34
                        },
                        new
                        {
                            Id = new Guid("23686315-2b41-46cd-991f-4799801a971d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 36
                        },
                        new
                        {
                            Id = new Guid("6503710f-27a0-49cc-b539-4a05278b16de"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 38
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_reviews_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Role>("Role")
                        .HasColumnType("role")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("363027b3-4251-4411-a93d-5784045006a2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@mail.com",
                            FirstName = "JohnAdmin",
                            LastName = "Doe",
                            Password = "4124ebd899e11c1f33d04f709918f0fb0896e50af02b6c60f4213d5a3b2fc629",
                            Role = Role.Admin,
                            Salt = new byte[] { 0, 231, 219, 105, 167, 39, 78, 172, 173, 145, 49, 185, 216, 123, 64, 203, 83, 236, 209, 138, 106, 16, 225, 205, 117, 54, 237, 42, 242, 124, 69, 53, 229, 216, 186, 157, 157, 202, 244, 22, 52, 11, 45, 27, 172, 63, 102, 102, 112, 41, 231, 119, 46, 148, 249, 161, 146, 62, 10, 149, 198, 97, 19, 3 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f2a0a70e-1d0e-45c4-86eb-cfacc304cb18"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer@mail.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Password = "6bf28f598cc09f88ccc998fc2d8b56b10c38650f7df56a29c9da9ce2a8ffe69f",
                            Role = Role.Customer,
                            Salt = new byte[] { 208, 71, 35, 146, 113, 55, 35, 80, 225, 155, 184, 236, 245, 255, 26, 174, 144, 187, 215, 60, 0, 39, 75, 22, 89, 6, 128, 63, 125, 200, 110, 249, 203, 135, 242, 118, 180, 102, 149, 86, 169, 181, 250, 180, 229, 99, 139, 41, 168, 163, 40, 54, 238, 205, 228, 196, 217, 224, 77, 254, 233, 232, 199, 142 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Address")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Avatar")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Avatar", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_avatar_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_product_line_product_line_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Order", null)
                        .WithMany("orderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", "ProductLine")
                        .WithMany("Products")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_product_line_product_line_id");

                    b.HasOne("Ecommerce.Core.src.Entities.ProductSize", "ProductSize")
                        .WithMany("Products")
                        .HasForeignKey("ProductSizeId")
                        .HasConstraintName("fk_products_product_size_product_size_id");

                    b.Navigation("ProductLine");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Category", "Category")
                        .WithMany("ProductLines")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_line_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_products_product_id");

                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Navigation("ProductLines");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Avatar")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
