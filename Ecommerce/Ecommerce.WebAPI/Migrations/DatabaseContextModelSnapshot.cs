// <auto-generated />
using System;
using Ecommerce.Core.src.Entities;
using Ecommerce.WebAPI.src.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.WebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", new[] { "registered", "delivered", "canceled", "pending" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "admin", "customer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("house_number");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_address_user_id");

                    b.ToTable("address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("01411f52-41ce-43f5-83a1-d50c7df8392d"),
                            City = "Cityville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "123",
                            PostCode = "12345",
                            Street = "Main St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("38d0e136-6d6a-4b0a-abb4-b77303188268")
                        },
                        new
                        {
                            Id = new Guid("b35e7d1f-2f43-4449-9735-a682480ea733"),
                            City = "Townsville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "456",
                            PostCode = "67890",
                            Street = "Oak St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("e37fe659-778e-4fa8-9948-a297b7995cc2")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_avatar");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_avatar_user_id");

                    b.ToTable("avatar", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f914cfb-d3c1-4f00-b4c5-493990d511e9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 4, 5, 6 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("38d0e136-6d6a-4b0a-abb4-b77303188268")
                        },
                        new
                        {
                            Id = new Guid("2449e466-9c64-40e4-a4bf-4d5ed807e451"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 10, 11, 12 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("e37fe659-778e-4fa8-9948-a297b7995cc2")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c62a9d9-870b-435e-8b68-f92ccb614f0a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "tshirts.jpg",
                            Name = "T-Shirts",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b5b6711e-6b67-489b-9a17-ebc5e7f79875"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "jeans.jpg",
                            Name = "Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0ac4d2f4-b4e5-4e27-ae9f-e83448d2776b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "dresses.jpg",
                            Name = "Dresses",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f7af2773-ea4c-4151-971f-089e0cbabb7a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "footwear.jpg",
                            Name = "Footwear",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("45a40c36-24a9-46a5-8717-6ff1012e0f33"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "accessories.jpg",
                            Name = "Accessories",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_image");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_image_product_line_id");

                    b.ToTable("image", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("075c4e81-2c62-41fa-a81a-2814ba9d288f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 250, 72, 220, 68, 99, 155, 233, 195, 82, 123, 242, 185, 58, 34, 242, 161, 25, 23, 254, 65, 252, 51, 92, 229, 216, 213, 145, 79, 45, 207, 175, 69, 197, 77, 248, 165, 139, 31, 119, 241, 82, 247, 237, 57, 143, 99, 132, 108, 41, 66, 10, 96, 72, 71, 177, 92, 144, 38, 78, 203, 89, 162, 158, 33, 115, 33, 114, 140, 227, 191, 57, 157, 80, 195, 218, 208, 200, 43, 252, 47, 59, 228, 168, 175, 238, 120, 75, 31, 23, 213, 110, 114, 223, 108, 149, 254, 246, 100, 77, 97, 46, 132, 49, 96, 75, 170, 101, 248, 79, 170, 177, 47, 232, 196, 157, 174, 74, 167, 186, 67, 12, 239, 203, 37, 90, 124, 233, 89, 239, 199, 124, 49, 97, 215, 236, 237, 163, 241, 218, 104, 77, 174, 188, 131, 82, 179, 89, 124, 69, 101, 108, 83, 182, 237, 13, 151, 65, 25, 242, 152, 7, 99, 87, 2, 171, 153, 183, 63, 255, 15, 200, 240, 40, 252, 211, 72, 0, 174, 81, 96, 176, 50, 233, 43, 102, 202, 158, 103, 156, 171, 23, 4, 198, 231, 50, 23, 95, 17, 70, 124, 147, 154, 87, 22, 47, 214, 187, 75, 42, 162, 143, 71, 245, 105, 66, 147, 19, 128, 222, 15, 87, 30, 143, 44, 71, 74, 252, 32, 170, 48, 46, 60, 201, 239, 148, 196, 147, 73, 186, 3, 173, 207, 106, 161, 253, 172, 88, 202, 179, 124, 241, 59, 18, 156, 56, 50, 4, 19, 188, 206, 186, 207, 108, 100, 138, 13, 170, 105, 195, 240, 163, 231, 214, 18, 218, 44, 18, 19, 71, 173, 94, 139, 248, 201, 196, 12, 31, 58, 139, 120, 46, 136, 251, 236, 121, 218, 216, 13, 1, 195 },
                            ProductLineId = new Guid("637406e2-9ba0-429e-a7dd-245d524fae34"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c320d8c5-5070-44b3-ade2-d2194e8b080f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 192, 242, 25, 197, 54, 148, 98, 180, 148, 67, 215, 113, 46, 218, 18, 100, 137, 16, 86, 250, 198, 40, 245, 62, 16, 203, 15, 177, 148, 143, 128, 250, 223, 120, 176, 113, 253, 107, 98, 135, 65, 179, 108, 27, 174, 34, 232, 189, 250, 164, 251, 49, 251, 166, 74, 36, 136, 243, 80, 77, 211, 172, 55, 97, 211, 132, 188, 62, 122, 1, 88, 132, 4, 67, 125, 56, 250, 225, 134, 109, 59, 23, 62, 71, 91, 102, 91, 216, 7, 86, 178, 184, 91, 52, 228, 150, 12, 2, 82, 34, 253, 159, 251, 83, 5, 80, 229, 2, 124, 26, 20, 99, 140, 135, 103, 22, 36, 150, 7, 120, 143, 134, 21, 90, 121, 226, 146, 78, 247, 139, 206, 181, 68, 22, 110, 189, 211, 29, 95, 234, 47, 123, 21, 48, 47, 61, 183, 142, 103, 107, 109, 85, 219, 90, 143, 124, 141, 81, 112, 108, 145, 81, 254, 115, 71, 48, 239, 62, 192, 62, 236, 36, 202, 242, 105, 59, 89, 0, 86, 252, 142, 62, 195, 145, 49, 188, 148, 83, 20, 74, 112, 11, 27, 155, 166, 172, 127, 221, 158, 107, 230, 89, 166, 19, 142, 45, 90, 22, 176, 193, 115, 60, 175, 62, 211, 189, 35, 244, 211, 98, 2, 214, 226, 235, 210, 144, 190, 163, 19, 96, 68, 65, 12, 217, 6, 73, 178, 5, 205, 220, 56, 168, 10, 102, 70, 5, 174, 160, 130, 55, 251, 15, 37, 161, 185, 98, 36, 32, 242, 124, 170, 206, 208, 211, 82, 179, 198, 221, 59, 71, 17, 25, 100, 73, 0, 79, 119, 140, 232, 216, 42, 162, 154, 113, 59, 165, 8, 195, 143, 92, 33, 149, 164, 55, 213, 30, 219, 84, 250, 112 },
                            ProductLineId = new Guid("85d41e78-05dc-4d77-b65b-5157b0dee22d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f2d58d00-8a7c-4d91-a225-7325b6fac53a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 195, 141, 45, 253, 160, 48, 235, 20, 236, 61, 180, 57, 0, 204, 22, 0, 70, 204, 245, 5, 139, 26, 133, 76, 202, 220, 6, 91, 21, 59, 116, 156, 200, 95, 209, 216, 82, 132, 92, 84, 51, 222, 144, 111, 229, 208, 113, 183, 86, 67, 72, 36, 231, 48, 142, 196, 168, 42, 12, 101, 40, 25, 46, 115, 117, 220, 155, 164, 67, 77, 14, 76, 31, 210, 224, 198, 137, 125, 84, 78, 48, 109, 149, 130, 186, 1, 10, 27, 103, 243, 164, 129, 255, 135, 113, 220, 145, 130, 149, 43, 87, 156, 180, 122, 218, 150, 0, 8, 233, 221, 112, 196, 111, 187, 73, 84, 121, 203, 97, 105, 233, 142, 168, 132, 17, 153, 116, 46, 130, 168, 94, 172, 103, 194, 226, 177, 41, 237, 67, 115, 129, 158, 9, 245, 173, 214, 75, 19, 56, 197, 57, 60, 141, 192, 241, 243, 240, 190, 21, 34, 191, 114, 24, 84, 128, 13, 59, 64, 36, 13, 255, 173, 66, 48, 36, 28, 17, 107, 112, 55, 193, 137, 249, 79, 124, 161, 32, 76, 111, 10, 28, 138, 140, 69, 132, 142, 224, 117, 14, 93, 145, 214, 208, 195, 70, 174, 255, 192, 17, 82, 88, 191, 219, 79, 147, 76, 122, 38, 220, 81, 85, 60, 61, 237, 13, 241, 6, 61, 232, 189, 74, 253, 55, 79, 17, 224, 71, 156, 157, 157, 152, 136, 9, 182, 82, 42, 110, 207, 143, 242, 128, 109, 112, 230, 80, 63, 158, 206, 173, 63, 81, 129, 42, 242, 135, 244, 142, 59, 179, 126, 138, 205, 58, 186, 75, 33, 113, 113, 85, 182, 57, 43, 90, 250, 77, 24, 245, 219, 158, 127, 202, 141, 59, 180, 125, 104, 13, 231, 59, 25 },
                            ProductLineId = new Guid("9e881013-ca86-46d8-a216-91721d2c9b81"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7371e666-0926-4ebf-9c95-424161707e89"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 115, 252, 115, 39, 226, 212, 0, 60, 55, 20, 34, 23, 162, 109, 29, 83, 113, 218, 202, 81, 169, 152, 184, 80, 63, 223, 86, 37, 63, 26, 54, 20, 10, 244, 25, 153, 239, 253, 97, 187, 130, 155, 107, 142, 21, 200, 5, 133, 142, 155, 181, 65, 138, 183, 56, 24, 175, 231, 123, 208, 104, 243, 223, 117, 227, 97, 56, 34, 72, 196, 74, 162, 47, 12, 20, 243, 63, 144, 125, 25, 190, 122, 122, 12, 187, 150, 78, 14, 163, 75, 251, 144, 114, 97, 108, 130, 145, 217, 79, 213, 96, 206, 108, 104, 112, 186, 225, 110, 211, 206, 133, 185, 187, 72, 249, 199, 48, 72, 109, 77, 195, 64, 137, 182, 2, 238, 7, 75, 185, 141, 25, 107, 201, 0, 242, 126, 104, 252, 19, 210, 181, 39, 79, 132, 74, 147, 185, 55, 137, 60, 106, 198, 241, 221, 75, 189, 202, 166, 137, 128, 225, 143, 191, 146, 70, 9, 111, 105, 17, 143, 90, 232, 241, 189, 132, 55, 10, 5, 121, 253, 52, 110, 81, 254, 42, 0, 197, 54, 26, 165, 198, 100, 112, 168, 228, 22, 96, 25, 63, 148, 22, 15, 140, 255, 194, 165, 100, 60, 44, 33, 215, 44, 126, 44, 72, 21, 41, 90, 242, 7, 100, 216, 23, 174, 17, 5, 61, 108, 98, 3, 69, 101, 130, 177, 181, 147, 219, 217, 3, 101, 63, 165, 103, 181, 70, 33, 28, 200, 126, 70, 81, 202, 176, 17, 91, 142, 12, 116, 201, 40, 132, 76, 234, 52, 243, 132, 100, 82, 68, 238, 198, 122, 64, 188, 74, 65, 89, 65, 95, 54, 78, 17, 57, 139, 118, 86, 248, 72, 100, 196, 96, 183, 72, 24, 161, 4, 143, 38, 131, 13 },
                            ProductLineId = new Guid("6923faa9-7942-4cef-8336-c7b4c6c60d85"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a62afdcf-d04d-4c46-b268-65bc8ee68a72"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 227, 162, 64, 131, 72, 67, 8, 171, 24, 169, 66, 171, 177, 212, 244, 114, 196, 40, 102, 157, 192, 243, 65, 210, 185, 68, 203, 171, 153, 187, 102, 227, 40, 198, 219, 129, 129, 172, 216, 205, 148, 184, 233, 222, 8, 182, 103, 102, 177, 145, 37, 135, 50, 211, 180, 121, 184, 142, 165, 101, 83, 217, 12, 25, 18, 149, 124, 170, 250, 4, 11, 18, 58, 173, 199, 136, 173, 22, 200, 190, 159, 220, 0, 65, 68, 154, 159, 21, 201, 66, 19, 236, 212, 229, 162, 121, 195, 112, 108, 241, 44, 104, 41, 57, 197, 94, 211, 175, 172, 86, 68, 126, 133, 228, 208, 52, 63, 150, 26, 178, 253, 9, 149, 168, 240, 240, 250, 146, 35, 62, 109, 85, 140, 122, 249, 48, 189, 52, 116, 108, 253, 175, 191, 222, 25, 8, 157, 233, 108, 203, 56, 125, 178, 157, 53, 70, 18, 38, 101, 242, 11, 9, 91, 129, 31, 137, 106, 171, 60, 153, 182, 136, 233, 242, 1, 98, 124, 104, 38, 130, 248, 64, 47, 172, 189, 122, 133, 228, 65, 64, 189, 103, 54, 235, 73, 91, 33, 104, 146, 46, 143, 225, 0, 56, 25, 118, 101, 181, 236, 49, 253, 47, 84, 231, 202, 44, 72, 203, 249, 199, 184, 178, 2, 251, 120, 121, 133, 63, 166, 24, 210, 252, 151, 3, 170, 87, 133, 30, 231, 252, 78, 66, 233, 233, 254, 184, 100, 90, 127, 92, 98, 148, 34, 156, 131, 105, 166, 41, 80, 94, 54, 9, 3, 174, 61, 112, 199, 89, 253, 71, 147, 54, 50, 69, 31, 159, 165, 105, 62, 147, 194, 33, 253, 77, 239, 104, 44, 182, 224, 168, 212, 108, 213, 17, 188, 118, 177, 52, 178, 143 },
                            ProductLineId = new Guid("637406e2-9ba0-429e-a7dd-245d524fae34"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6db0edc0-3dae-4cca-9a5f-0492d5ea3ff4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 89, 147, 243, 93, 207, 86, 74, 3, 255, 66, 111, 203, 29, 137, 251, 238, 211, 219, 50, 71, 207, 204, 247, 237, 172, 63, 204, 197, 59, 209, 3, 38, 110, 75, 239, 70, 106, 21, 254, 128, 76, 146, 229, 11, 95, 119, 244, 244, 17, 65, 153, 36, 87, 69, 20, 171, 116, 115, 223, 1, 243, 45, 57, 3, 154, 76, 248, 74, 192, 161, 128, 113, 239, 249, 11, 136, 247, 51, 204, 200, 166, 102, 30, 19, 174, 241, 175, 161, 38, 87, 194, 211, 83, 71, 81, 35, 143, 74, 42, 244, 243, 171, 79, 63, 25, 110, 207, 229, 13, 105, 207, 152, 47, 221, 160, 27, 207, 68, 205, 148, 195, 210, 43, 56, 127, 58, 53, 76, 128, 255, 104, 29, 225, 145, 59, 89, 187, 98, 49, 160, 143, 49, 207, 56, 159, 68, 66, 178, 106, 225, 181, 51, 216, 171, 26, 176, 37, 153, 216, 240, 154, 151, 75, 212, 130, 159, 191, 254, 80, 202, 94, 222, 112, 213, 183, 98, 127, 61, 53, 31, 79, 132, 126, 109, 11, 116, 134, 205, 188, 228, 112, 64, 16, 210, 169, 195, 84, 101, 183, 26, 228, 6, 91, 44, 193, 149, 42, 212, 67, 66, 109, 43, 188, 201, 72, 123, 208, 101, 65, 158, 213, 100, 69, 168, 170, 248, 168, 104, 190, 62, 220, 89, 197, 219, 6, 148, 46, 235, 25, 132, 231, 143, 87, 5, 21, 60, 167, 53, 157, 112, 104, 21, 212, 20, 133, 196, 85, 136, 219, 236, 3, 154, 100, 219, 113, 121, 5, 20, 62, 215, 175, 248, 107, 187, 242, 217, 87, 12, 221, 201, 13, 72, 200, 50, 153, 254, 139, 44, 25, 57, 158, 174, 16, 106, 223, 221, 73, 111, 28, 202 },
                            ProductLineId = new Guid("85d41e78-05dc-4d77-b65b-5157b0dee22d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("14267ddc-6fae-4351-b447-299ab3ea0783"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 249, 86, 116, 153, 64, 116, 167, 82, 101, 177, 227, 50, 34, 154, 68, 23, 10, 27, 184, 48, 69, 253, 212, 213, 123, 93, 248, 219, 92, 238, 129, 60, 164, 201, 113, 195, 255, 50, 228, 126, 117, 190, 23, 60, 106, 10, 114, 163, 69, 165, 238, 254, 217, 28, 27, 201, 151, 132, 163, 231, 207, 21, 172, 93, 120, 125, 66, 219, 29, 54, 74, 111, 150, 190, 45, 111, 8, 48, 156, 16, 119, 155, 79, 161, 242, 60, 230, 9, 112, 143, 157, 189, 218, 192, 67, 68, 23, 116, 173, 160, 108, 229, 179, 51, 140, 179, 90, 27, 20, 206, 141, 171, 232, 164, 35, 163, 240, 207, 146, 32, 147, 188, 249, 141, 221, 130, 112, 237, 193, 248, 74, 159, 8, 187, 224, 118, 169, 77, 102, 122, 189, 190, 244, 254, 37, 137, 46, 238, 215, 20, 21, 87, 101, 251, 15, 182, 92, 224, 88, 162, 222, 162, 214, 156, 7, 228, 107, 177, 20, 221, 226, 50, 138, 80, 93, 244, 21, 184, 68, 224, 121, 171, 43, 201, 67, 78, 239, 18, 21, 80, 18, 23, 3, 134, 25, 73, 49, 221, 143, 171, 139, 219, 105, 218, 26, 72, 17, 169, 126, 95, 150, 64, 72, 221, 147, 102, 129, 41, 148, 255, 202, 98, 146, 179, 214, 253, 154, 91, 91, 61, 237, 113, 201, 232, 206, 19, 188, 176, 55, 142, 8, 204, 25, 164, 143, 30, 151, 137, 181, 67, 76, 153, 125, 18, 21, 54, 140, 68, 7, 166, 135, 146, 9, 1, 196, 76, 113, 22, 181, 76, 145, 34, 0, 221, 230, 204, 37, 209, 96, 175, 113, 213, 106, 32, 159, 31, 85, 212, 170, 25, 206, 30, 130, 68, 74, 222, 66, 156, 76, 69 },
                            ProductLineId = new Guid("9e881013-ca86-46d8-a216-91721d2c9b81"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a6b6d2f1-dda3-429d-b367-dc002cf01154"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 96, 166, 216, 102, 178, 99, 111, 8, 236, 12, 141, 219, 14, 226, 166, 0, 76, 50, 109, 175, 118, 80, 70, 50, 65, 182, 128, 23, 212, 17, 149, 221, 238, 186, 235, 217, 247, 68, 140, 179, 252, 224, 188, 108, 184, 182, 60, 76, 206, 229, 52, 109, 70, 176, 44, 52, 31, 92, 188, 111, 202, 208, 22, 1, 81, 246, 21, 31, 242, 26, 206, 93, 167, 132, 61, 202, 116, 46, 157, 146, 69, 76, 70, 87, 165, 126, 212, 46, 161, 231, 147, 242, 148, 149, 58, 161, 53, 35, 6, 232, 235, 221, 84, 210, 117, 44, 71, 142, 124, 88, 145, 118, 227, 183, 128, 88, 248, 111, 246, 35, 118, 236, 115, 185, 75, 203, 52, 31, 170, 221, 197, 76, 102, 219, 72, 83, 74, 14, 240, 83, 13, 93, 139, 163, 174, 195, 62, 35, 9, 74, 13, 128, 124, 217, 71, 17, 28, 134, 98, 206, 79, 47, 225, 36, 248, 174, 115, 118, 254, 44, 55, 1, 120, 35, 125, 62, 126, 5, 221, 238, 227, 186, 161, 92, 230, 107, 85, 83, 232, 243, 107, 105, 215, 6, 86, 192, 45, 163, 135, 200, 23, 179, 185, 0, 85, 26, 163, 8, 157, 193, 211, 140, 30, 177, 67, 97, 254, 3, 40, 56, 72, 74, 186, 121, 213, 199, 172, 229, 64, 63, 200, 158, 35, 126, 162, 128, 51, 25, 161, 184, 209, 188, 79, 163, 131, 247, 142, 141, 225, 122, 230, 59, 84, 0, 210, 81, 93, 176, 51, 17, 217, 140, 183, 223, 234, 210, 90, 41, 10, 41, 121, 185, 230, 196, 128, 110, 144, 41, 123, 19, 146, 184, 73, 159, 100, 216, 148, 195, 39, 206, 55, 35, 137, 182, 192, 162, 237, 151, 70, 55 },
                            ProductLineId = new Guid("6923faa9-7942-4cef-8336-c7b4c6c60d85"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<OrderStatus>("OrderStatus")
                        .HasColumnType("order_status")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId", "OrderId")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Inventory")
                        .HasColumnType("integer")
                        .HasColumnName("inventory");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<Guid?>("ProductSizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_size_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_products_product_line_id");

                    b.HasIndex("ProductSizeId")
                        .HasDatabaseName("ix_products_product_size_id");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab650b84-444b-4e74-8cb0-e1abff794d91"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("637406e2-9ba0-429e-a7dd-245d524fae34"),
                            ProductSizeId = new Guid("cc6acc79-51fd-44b5-94cb-d0b8ddfed7e6"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ca507961-0e73-4ef5-b032-b99cb2524891"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("637406e2-9ba0-429e-a7dd-245d524fae34"),
                            ProductSizeId = new Guid("918933df-fc8b-4c63-bd98-295e8a2b6e46"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f02ffc9d-425e-445b-9426-d2823b74f2de"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("637406e2-9ba0-429e-a7dd-245d524fae34"),
                            ProductSizeId = new Guid("6363ff13-7bde-47d6-a724-b8c4922865c8"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4deae492-ef1f-46e9-aac6-ed103e87dc8e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("637406e2-9ba0-429e-a7dd-245d524fae34"),
                            ProductSizeId = new Guid("74eec614-f6f1-4c8e-88b2-1a746667c118"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fbf7f7f2-4cb7-4056-b4b9-5af71aaaac0d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("85d41e78-05dc-4d77-b65b-5157b0dee22d"),
                            ProductSizeId = new Guid("cc6acc79-51fd-44b5-94cb-d0b8ddfed7e6"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("32e53075-94ca-4123-8ed9-e81487ac1b1e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("85d41e78-05dc-4d77-b65b-5157b0dee22d"),
                            ProductSizeId = new Guid("918933df-fc8b-4c63-bd98-295e8a2b6e46"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("55593399-dac8-48d7-ab46-c5275cbf3d4b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("85d41e78-05dc-4d77-b65b-5157b0dee22d"),
                            ProductSizeId = new Guid("6363ff13-7bde-47d6-a724-b8c4922865c8"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("266e53f3-df6a-4e53-b4db-5c142f2ff287"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("85d41e78-05dc-4d77-b65b-5157b0dee22d"),
                            ProductSizeId = new Guid("74eec614-f6f1-4c8e-88b2-1a746667c118"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("21669acc-3181-4c84-a7e3-e511f3765103"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("9e881013-ca86-46d8-a216-91721d2c9b81"),
                            ProductSizeId = new Guid("cc6acc79-51fd-44b5-94cb-d0b8ddfed7e6"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("63ebd849-58d4-49bf-beb6-f6503c016fde"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("9e881013-ca86-46d8-a216-91721d2c9b81"),
                            ProductSizeId = new Guid("918933df-fc8b-4c63-bd98-295e8a2b6e46"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("26197d24-a182-4bad-907b-14db32b40935"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("9e881013-ca86-46d8-a216-91721d2c9b81"),
                            ProductSizeId = new Guid("6363ff13-7bde-47d6-a724-b8c4922865c8"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("47d1c860-ce66-40a2-907d-6a238f92e73d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("9e881013-ca86-46d8-a216-91721d2c9b81"),
                            ProductSizeId = new Guid("74eec614-f6f1-4c8e-88b2-1a746667c118"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("24ea27a8-c1d3-407f-b0c6-866399d73aae"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("6923faa9-7942-4cef-8336-c7b4c6c60d85"),
                            ProductSizeId = new Guid("cc6acc79-51fd-44b5-94cb-d0b8ddfed7e6"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c210ab4b-fae1-4022-8f3b-fce74a777989"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("6923faa9-7942-4cef-8336-c7b4c6c60d85"),
                            ProductSizeId = new Guid("918933df-fc8b-4c63-bd98-295e8a2b6e46"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d3027594-2a91-4a38-97b7-6336a113284f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("6923faa9-7942-4cef-8336-c7b4c6c60d85"),
                            ProductSizeId = new Guid("6363ff13-7bde-47d6-a724-b8c4922865c8"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1dc186bc-cc8d-4149-bfad-c5224752d2ba"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("6923faa9-7942-4cef-8336-c7b4c6c60d85"),
                            ProductSizeId = new Guid("74eec614-f6f1-4c8e-88b2-1a746667c118"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("54e840e4-4559-4d5f-9c6a-5d78724d6375"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("6923faa9-7942-4cef-8336-c7b4c6c60d85"),
                            ProductSizeId = new Guid("cc6acc79-51fd-44b5-94cb-d0b8ddfed7e6"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4ced6f16-de82-4689-8948-5a41827e06d9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("6923faa9-7942-4cef-8336-c7b4c6c60d85"),
                            ProductSizeId = new Guid("918933df-fc8b-4c63-bd98-295e8a2b6e46"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d71a794a-d2f0-41e6-b1c4-8a0665b9f00e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("6923faa9-7942-4cef-8336-c7b4c6c60d85"),
                            ProductSizeId = new Guid("6363ff13-7bde-47d6-a724-b8c4922865c8"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fc9ea213-68f8-4f3a-91f9-3562108456dc"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("6923faa9-7942-4cef-8336-c7b4c6c60d85"),
                            ProductSizeId = new Guid("74eec614-f6f1-4c8e-88b2-1a746667c118"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_line");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_product_line_category_id");

                    b.ToTable("product_line", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("637406e2-9ba0-429e-a7dd-245d524fae34"),
                            CategoryId = new Guid("7c62a9d9-870b-435e-8b68-f92ccb614f0a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A comfortable and stylish cotton T-shirt.",
                            Price = 19.99m,
                            Title = "Cotton T-Shirt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("85d41e78-05dc-4d77-b65b-5157b0dee22d"),
                            CategoryId = new Guid("b5b6711e-6b67-489b-9a17-ebc5e7f79875"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Slim fit jeans for a modern look.",
                            Price = 49.99m,
                            Title = "Slim Fit Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9e881013-ca86-46d8-a216-91721d2c9b81"),
                            CategoryId = new Guid("0ac4d2f4-b4e5-4e27-ae9f-e83448d2776b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A floral summer dress for any occasion.",
                            Price = 29.99m,
                            Title = "Summer Dress",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6923faa9-7942-4cef-8336-c7b4c6c60d85"),
                            CategoryId = new Guid("f7af2773-ea4c-4151-971f-089e0cbabb7a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Casual sneakers for everyday wear.",
                            Price = 39.99m,
                            Title = "Sneakers",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d628a5ab-fe20-4fdc-9522-8157d7fa73f6"),
                            CategoryId = new Guid("45a40c36-24a9-46a5-8717-6ff1012e0f33"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Classic leather belt to complete your look.",
                            Price = 14.99m,
                            Title = "Leather Belt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_product_size");

                    b.ToTable("product_size", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc6acc79-51fd-44b5-94cb-d0b8ddfed7e6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 32
                        },
                        new
                        {
                            Id = new Guid("918933df-fc8b-4c63-bd98-295e8a2b6e46"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 34
                        },
                        new
                        {
                            Id = new Guid("6363ff13-7bde-47d6-a724-b8c4922865c8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 36
                        },
                        new
                        {
                            Id = new Guid("74eec614-f6f1-4c8e-88b2-1a746667c118"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 38
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_reviews_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Role>("Role")
                        .HasColumnType("role")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("38d0e136-6d6a-4b0a-abb4-b77303188268"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@mail.com",
                            FirstName = "JohnAdmin",
                            LastName = "Doe",
                            Password = "2b41b89c7fcf1e6fd1d9775fc0c211eb55b9c984f7c0276d1b38bc2bef9bb63d",
                            Role = Role.Admin,
                            Salt = new byte[] { 232, 84, 109, 178, 37, 139, 204, 51, 237, 39, 232, 237, 143, 216, 88, 166, 136, 168, 11, 229, 248, 204, 101, 8, 142, 194, 200, 199, 104, 43, 46, 119, 230, 230, 57, 174, 148, 144, 219, 196, 127, 225, 164, 187, 212, 240, 192, 97, 37, 135, 169, 86, 233, 226, 142, 70, 173, 154, 89, 230, 5, 109, 84, 127 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e37fe659-778e-4fa8-9948-a297b7995cc2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer@mail.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Password = "e2b12291d448dae0880fd3cc8c79a4263d8ec7a3ab45e9afeed0a905b23ca0b9",
                            Role = Role.Customer,
                            Salt = new byte[] { 129, 129, 165, 220, 211, 52, 196, 132, 251, 44, 152, 242, 126, 23, 163, 12, 3, 118, 153, 199, 36, 172, 67, 127, 251, 115, 185, 170, 41, 58, 128, 147, 224, 236, 176, 162, 158, 85, 50, 50, 102, 91, 115, 218, 135, 6, 46, 14, 105, 45, 128, 146, 239, 89, 36, 153, 224, 229, 174, 119, 120, 226, 203, 154 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Address")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Avatar")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Avatar", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_avatar_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_product_line_product_line_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Order", null)
                        .WithMany("orderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", "ProductLine")
                        .WithMany("Products")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_product_line_product_line_id");

                    b.HasOne("Ecommerce.Core.src.Entities.ProductSize", "ProductSize")
                        .WithMany("Products")
                        .HasForeignKey("ProductSizeId")
                        .HasConstraintName("fk_products_product_size_product_size_id");

                    b.Navigation("ProductLine");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Category", "Category")
                        .WithMany("ProductLines")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_line_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_products_product_id");

                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Navigation("ProductLines");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Avatar")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
