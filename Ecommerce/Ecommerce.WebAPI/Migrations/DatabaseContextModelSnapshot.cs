// <auto-generated />
using System;
using Ecommerce.Core.src.Entities;
using Ecommerce.WebAPI.src.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.WebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", new[] { "registered", "delivered", "canceled", "pending" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "admin", "customer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("house_number");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_address_user_id");

                    b.ToTable("address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fcc536e-8358-4591-ab75-81c56b7e0234"),
                            City = "Cityville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "123",
                            PostCode = "12345",
                            Street = "Main St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("40793f8f-43dd-4c83-aa87-59db4640efc0")
                        },
                        new
                        {
                            Id = new Guid("e0f00b7d-154b-4264-a985-1002f5a9151a"),
                            City = "Townsville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "456",
                            PostCode = "67890",
                            Street = "Oak St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9f8169eb-fbe1-4fea-83c4-0aed7bc1e07d")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_avatar");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_avatar_user_id");

                    b.ToTable("avatar", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a99677d2-56c5-41e4-94fb-4d18442ee59c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 4, 5, 6 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("40793f8f-43dd-4c83-aa87-59db4640efc0")
                        },
                        new
                        {
                            Id = new Guid("9bc4dbf7-d657-428a-bc2f-134d5189c947"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 10, 11, 12 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9f8169eb-fbe1-4fea-83c4-0aed7bc1e07d")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d9af9d9-caa9-43d8-b030-5d8d3260aa12"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "tshirts.jpg",
                            Name = "T-Shirts",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("53d7083a-5e0a-4bb2-894d-8ddf54dc6bdc"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "jeans.jpg",
                            Name = "Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0ea2ec9b-4b90-4e36-9768-bad90de106ad"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "dresses.jpg",
                            Name = "Dresses",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a9a68ded-3668-4a40-9453-987e7138ee46"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "footwear.jpg",
                            Name = "Footwear",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d15abc6c-d5c6-4448-96be-a08b5784a6f2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "accessories.jpg",
                            Name = "Accessories",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_image");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_image_product_line_id");

                    b.ToTable("image", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bcf539d-27e9-4673-9ccf-1a4765db8ab0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 41, 218, 111, 193, 208, 211, 76, 249, 29, 180, 141, 38, 78, 119, 198, 20, 105, 16, 111, 142, 142, 206, 134, 130, 220, 230, 120, 236, 183, 108, 114, 121, 195, 161, 252, 80, 113, 141, 97, 18, 204, 195, 42, 152, 164, 15, 143, 89, 236, 156, 203, 185, 85, 116, 10, 118, 57, 39, 48, 38, 202, 39, 213, 79, 157, 26, 65, 219, 140, 196, 230, 109, 233, 142, 67, 113, 49, 134, 170, 95, 3, 114, 225, 95, 66, 11, 101, 107, 185, 51, 228, 7, 49, 2, 143, 99, 12, 55, 174, 221, 95, 12, 24, 231, 182, 116, 23, 180, 128, 251, 36, 195, 51, 92, 211, 3, 236, 166, 0, 123, 87, 251, 113, 18, 129, 222, 238, 211, 227, 86, 91, 250, 201, 45, 124, 234, 83, 208, 127, 109, 141, 7, 115, 104, 64, 216, 188, 77, 20, 63, 85, 126, 8, 233, 7, 28, 235, 246, 224, 212, 30, 66, 172, 65, 180, 88, 240, 15, 168, 115, 10, 214, 29, 212, 5, 149, 185, 58, 62, 35, 243, 248, 206, 187, 231, 111, 0, 64, 46, 160, 171, 227, 28, 136, 107, 216, 136, 246, 105, 185, 71, 255, 250, 218, 126, 76, 89, 71, 147, 100, 246, 81, 196, 164, 62, 227, 196, 170, 107, 159, 100, 129, 90, 230, 226, 25, 34, 62, 78, 220, 121, 203, 183, 106, 39, 97, 11, 76, 94, 50, 46, 104, 136, 60, 20, 186, 209, 251, 160, 191, 152, 3, 85, 34, 223, 36, 184, 121, 135, 7, 63, 18, 184, 16, 162, 112, 54, 167, 162, 5, 176, 127, 141, 3, 208, 179, 178, 28, 56, 192, 40, 55, 14, 81, 68, 130, 17, 82, 245, 110, 31, 215, 57, 56, 26, 87, 41, 9, 255, 75 },
                            ProductLineId = new Guid("4e176c2a-03a4-4ece-9bfa-4ec88519cb83"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f026b58c-cca5-494b-8f51-09ec3092a2a8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 213, 148, 228, 25, 10, 233, 229, 232, 173, 211, 130, 208, 255, 252, 35, 251, 161, 83, 251, 231, 184, 9, 201, 98, 108, 252, 248, 233, 92, 61, 236, 23, 206, 15, 45, 213, 184, 193, 196, 161, 188, 225, 251, 247, 208, 249, 104, 205, 211, 111, 92, 138, 201, 246, 149, 138, 173, 174, 176, 92, 129, 211, 131, 199, 195, 253, 223, 39, 88, 125, 93, 27, 97, 141, 206, 93, 58, 85, 216, 203, 213, 206, 191, 240, 17, 115, 178, 199, 226, 72, 49, 254, 202, 195, 188, 40, 21, 66, 212, 82, 54, 122, 199, 252, 187, 61, 143, 148, 110, 222, 3, 182, 86, 185, 2, 218, 94, 20, 24, 214, 168, 225, 240, 177, 25, 34, 195, 54, 122, 60, 139, 200, 158, 176, 153, 78, 71, 242, 201, 5, 181, 123, 103, 253, 219, 157, 161, 157, 174, 183, 156, 117, 254, 250, 233, 214, 100, 207, 117, 129, 74, 236, 69, 36, 65, 37, 141, 135, 149, 98, 43, 74, 82, 13, 41, 37, 167, 93, 197, 189, 201, 64, 229, 4, 138, 238, 35, 156, 123, 156, 249, 35, 146, 92, 80, 79, 44, 63, 187, 197, 76, 221, 157, 0, 237, 216, 214, 104, 28, 90, 116, 4, 109, 195, 170, 165, 115, 245, 223, 219, 252, 29, 86, 126, 127, 136, 170, 111, 233, 207, 206, 5, 133, 186, 166, 172, 128, 113, 58, 201, 216, 242, 155, 102, 63, 61, 22, 205, 22, 73, 199, 210, 165, 178, 3, 202, 124, 66, 27, 133, 220, 46, 85, 8, 187, 46, 172, 64, 152, 66, 230, 22, 217, 123, 87, 164, 240, 82, 251, 68, 154, 254, 48, 201, 154, 244, 93, 40, 209, 213, 163, 60, 70, 243, 230, 102, 144, 151, 162, 129 },
                            ProductLineId = new Guid("2cdc397f-fae4-4297-b61e-6530eca8280e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("feb046b0-5e9e-46e8-a157-5d40890ac697"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 222, 201, 98, 143, 204, 110, 33, 117, 151, 94, 221, 97, 167, 100, 175, 8, 244, 128, 22, 219, 217, 41, 165, 163, 243, 22, 181, 50, 27, 2, 126, 179, 215, 59, 6, 14, 8, 147, 65, 26, 187, 41, 153, 98, 139, 7, 114, 92, 121, 152, 250, 135, 15, 73, 102, 203, 19, 226, 48, 139, 60, 12, 105, 106, 147, 23, 57, 151, 60, 78, 205, 153, 171, 205, 110, 93, 226, 160, 138, 65, 92, 107, 216, 143, 119, 128, 134, 147, 49, 142, 42, 245, 253, 123, 22, 24, 117, 225, 47, 131, 139, 203, 189, 104, 78, 22, 135, 237, 143, 23, 116, 171, 131, 240, 240, 10, 213, 218, 155, 94, 229, 81, 52, 22, 114, 155, 134, 125, 7, 144, 32, 177, 86, 146, 200, 24, 25, 6, 110, 189, 242, 186, 73, 58, 207, 44, 173, 172, 113, 193, 120, 42, 12, 67, 77, 131, 157, 217, 74, 142, 58, 35, 170, 144, 201, 118, 46, 177, 175, 66, 139, 155, 82, 70, 249, 72, 230, 193, 6, 35, 192, 71, 159, 86, 80, 153, 113, 156, 153, 76, 139, 76, 82, 89, 142, 171, 7, 194, 5, 18, 171, 144, 101, 75, 30, 248, 115, 101, 72, 93, 173, 220, 157, 175, 233, 61, 247, 181, 101, 77, 85, 49, 105, 167, 226, 196, 223, 200, 172, 162, 197, 29, 195, 54, 232, 99, 0, 191, 33, 99, 123, 22, 195, 107, 128, 139, 181, 6, 153, 21, 77, 49, 38, 16, 148, 255, 206, 181, 202, 187, 146, 142, 135, 148, 128, 131, 221, 130, 35, 98, 73, 199, 8, 63, 237, 210, 116, 231, 6, 110, 174, 163, 237, 205, 234, 182, 111, 181, 140, 119, 235, 65, 133, 121, 3, 6, 185, 50, 225, 183 },
                            ProductLineId = new Guid("952b8a28-8642-4d19-8b83-a7c508495a99"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("eb2af2a1-d15d-49f2-8f54-aa4e60207c89"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 200, 120, 142, 135, 158, 115, 27, 186, 181, 153, 144, 252, 56, 191, 138, 151, 190, 107, 224, 182, 33, 209, 37, 229, 238, 219, 44, 253, 95, 194, 172, 31, 239, 15, 130, 198, 177, 33, 79, 109, 45, 68, 26, 56, 42, 242, 133, 140, 88, 219, 210, 6, 6, 166, 230, 64, 26, 8, 79, 98, 101, 187, 123, 243, 1, 38, 228, 194, 130, 235, 56, 215, 191, 93, 36, 24, 62, 113, 94, 11, 222, 57, 152, 7, 122, 146, 102, 164, 15, 104, 5, 130, 77, 74, 157, 141, 144, 13, 57, 221, 59, 210, 121, 49, 40, 84, 240, 66, 41, 69, 231, 191, 86, 125, 199, 131, 143, 180, 57, 213, 1, 99, 136, 151, 116, 179, 233, 188, 237, 141, 199, 181, 136, 47, 226, 14, 82, 244, 131, 72, 66, 176, 6, 109, 23, 247, 217, 115, 22, 208, 222, 127, 208, 162, 168, 191, 32, 58, 100, 236, 177, 136, 206, 194, 9, 75, 94, 109, 71, 242, 37, 173, 249, 202, 209, 240, 17, 254, 217, 12, 15, 194, 183, 239, 229, 163, 52, 107, 59, 164, 163, 210, 170, 234, 31, 157, 155, 139, 109, 210, 207, 219, 242, 142, 16, 96, 74, 105, 202, 219, 3, 18, 41, 180, 8, 234, 134, 182, 229, 189, 236, 185, 40, 176, 169, 237, 156, 106, 79, 92, 218, 8, 191, 239, 114, 216, 113, 41, 153, 100, 5, 119, 119, 39, 80, 76, 191, 71, 139, 29, 29, 141, 179, 36, 115, 114, 92, 111, 136, 202, 163, 131, 147, 73, 183, 232, 92, 243, 208, 152, 140, 148, 224, 98, 185, 138, 228, 19, 204, 71, 251, 84, 129, 45, 157, 115, 253, 249, 78, 87, 251, 223, 54, 60, 6, 179, 114, 113, 117, 39 },
                            ProductLineId = new Guid("3d66d92e-caae-45e0-9c41-d9d824fb37aa"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("080eaf62-f8b0-4ff1-8895-7aacbca6e7a8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 102, 36, 215, 81, 190, 70, 190, 73, 79, 41, 137, 230, 155, 69, 7, 49, 99, 237, 214, 201, 190, 75, 206, 105, 138, 8, 141, 240, 158, 23, 77, 64, 197, 176, 96, 222, 66, 209, 200, 252, 76, 254, 122, 148, 234, 143, 203, 90, 233, 116, 34, 235, 25, 122, 136, 80, 100, 26, 243, 143, 214, 163, 39, 151, 247, 227, 222, 18, 229, 12, 107, 75, 239, 54, 243, 57, 219, 225, 130, 2, 174, 105, 38, 200, 65, 129, 58, 117, 4, 247, 221, 202, 220, 160, 17, 115, 193, 205, 42, 112, 127, 136, 33, 136, 149, 92, 32, 105, 223, 79, 253, 102, 71, 59, 141, 43, 45, 10, 76, 77, 206, 75, 185, 92, 48, 128, 61, 123, 83, 189, 163, 156, 84, 223, 240, 252, 132, 5, 162, 11, 225, 118, 146, 43, 131, 245, 135, 7, 126, 128, 51, 9, 134, 255, 114, 43, 54, 247, 119, 66, 31, 244, 68, 66, 227, 63, 35, 97, 104, 214, 83, 197, 155, 1, 230, 62, 102, 32, 38, 181, 168, 138, 28, 225, 44, 118, 214, 133, 228, 97, 165, 152, 248, 141, 155, 99, 235, 129, 231, 139, 222, 105, 43, 198, 234, 243, 247, 94, 161, 185, 117, 225, 80, 141, 149, 252, 77, 135, 191, 89, 69, 69, 76, 81, 253, 204, 65, 140, 47, 205, 68, 125, 101, 186, 73, 107, 95, 5, 2, 85, 217, 242, 190, 165, 123, 109, 96, 160, 46, 127, 58, 37, 245, 223, 149, 150, 244, 109, 240, 20, 226, 111, 177, 22, 75, 26, 11, 101, 7, 101, 180, 1, 232, 19, 174, 254, 125, 3, 132, 15, 113, 62, 126, 100, 249, 102, 89, 66, 131, 242, 139, 102, 185, 147, 10, 138, 60, 117, 149, 81 },
                            ProductLineId = new Guid("4e176c2a-03a4-4ece-9bfa-4ec88519cb83"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dfdc46fd-8c35-4a54-b013-ecfac51af7ac"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 168, 123, 7, 15, 94, 83, 105, 161, 200, 174, 117, 228, 33, 163, 241, 253, 166, 150, 132, 73, 244, 233, 39, 210, 119, 244, 239, 170, 44, 48, 20, 135, 113, 98, 238, 140, 31, 180, 20, 98, 48, 45, 16, 217, 101, 42, 254, 226, 19, 241, 70, 110, 249, 134, 106, 27, 217, 22, 194, 95, 71, 24, 13, 192, 238, 167, 99, 158, 237, 53, 57, 102, 24, 182, 129, 178, 84, 144, 180, 128, 35, 213, 245, 197, 205, 20, 93, 91, 247, 165, 194, 56, 117, 209, 200, 161, 215, 66, 13, 50, 160, 43, 78, 125, 124, 94, 181, 71, 163, 237, 245, 152, 241, 213, 112, 4, 152, 157, 138, 159, 20, 83, 209, 86, 64, 94, 150, 100, 219, 155, 214, 198, 46, 35, 73, 129, 97, 22, 36, 179, 171, 149, 67, 223, 203, 209, 182, 72, 113, 77, 47, 96, 96, 1, 183, 125, 147, 121, 241, 178, 209, 199, 158, 72, 174, 180, 203, 152, 187, 35, 120, 139, 205, 70, 74, 181, 180, 194, 178, 176, 55, 234, 137, 227, 32, 109, 105, 57, 169, 86, 214, 233, 104, 172, 228, 197, 240, 172, 163, 172, 93, 39, 219, 96, 177, 113, 204, 237, 182, 150, 233, 131, 181, 130, 97, 13, 152, 193, 220, 197, 171, 85, 130, 210, 233, 234, 19, 253, 41, 70, 101, 53, 43, 237, 118, 89, 119, 186, 46, 53, 192, 153, 39, 53, 197, 106, 9, 238, 100, 3, 135, 230, 214, 229, 133, 175, 116, 246, 220, 223, 157, 3, 177, 2, 137, 67, 84, 147, 158, 192, 52, 195, 24, 187, 171, 82, 217, 174, 90, 235, 2, 80, 75, 90, 24, 65, 26, 177, 97, 149, 148, 173, 164, 48, 92, 49, 125, 167, 26, 10 },
                            ProductLineId = new Guid("2cdc397f-fae4-4297-b61e-6530eca8280e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9a52ea49-780a-44ef-b6e2-322d0080b01c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 83, 188, 54, 228, 165, 159, 221, 170, 239, 209, 68, 182, 20, 12, 95, 211, 113, 255, 105, 38, 34, 168, 79, 84, 88, 26, 64, 241, 124, 242, 67, 130, 122, 145, 134, 174, 245, 112, 225, 71, 81, 166, 61, 104, 69, 167, 142, 85, 249, 18, 219, 104, 189, 216, 16, 98, 81, 228, 149, 83, 16, 121, 174, 168, 199, 140, 193, 112, 254, 213, 132, 177, 147, 229, 209, 164, 93, 179, 138, 144, 189, 253, 25, 227, 80, 33, 32, 243, 53, 108, 123, 248, 64, 77, 40, 101, 167, 215, 223, 92, 199, 161, 126, 159, 159, 197, 116, 93, 12, 18, 253, 21, 249, 240, 60, 46, 106, 95, 33, 100, 66, 184, 75, 181, 70, 33, 171, 236, 12, 93, 68, 25, 133, 231, 171, 209, 137, 224, 222, 111, 174, 196, 178, 246, 238, 161, 241, 215, 45, 101, 233, 168, 103, 225, 221, 157, 253, 28, 146, 41, 220, 36, 44, 29, 14, 165, 171, 79, 125, 96, 206, 178, 81, 116, 4, 189, 178, 73, 164, 247, 100, 220, 127, 250, 11, 224, 173, 254, 139, 107, 118, 21, 105, 103, 227, 99, 110, 22, 240, 201, 148, 116, 176, 172, 127, 84, 255, 241, 167, 68, 225, 28, 53, 152, 220, 142, 136, 199, 30, 133, 116, 207, 160, 187, 232, 194, 207, 111, 57, 133, 201, 191, 95, 14, 107, 248, 134, 125, 134, 19, 78, 202, 20, 229, 91, 78, 59, 248, 13, 85, 25, 90, 99, 196, 170, 29, 142, 127, 133, 199, 50, 239, 76, 105, 70, 82, 223, 36, 180, 11, 82, 134, 215, 155, 146, 43, 2, 37, 141, 20, 148, 124, 111, 245, 148, 179, 41, 139, 58, 91, 252, 103, 39, 6, 36, 206, 56, 42, 133, 158 },
                            ProductLineId = new Guid("952b8a28-8642-4d19-8b83-a7c508495a99"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ee2d1aea-ffd9-4155-907a-bffd73d1a7fc"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 249, 68, 136, 208, 36, 106, 4, 159, 127, 21, 254, 226, 236, 121, 108, 88, 53, 243, 177, 17, 32, 246, 223, 101, 45, 253, 170, 82, 91, 251, 4, 222, 84, 146, 178, 153, 252, 179, 160, 55, 195, 195, 115, 14, 19, 59, 135, 195, 199, 221, 68, 4, 185, 105, 248, 170, 26, 89, 27, 111, 115, 95, 175, 80, 250, 75, 108, 87, 132, 144, 120, 216, 205, 75, 2, 5, 64, 40, 145, 20, 139, 177, 29, 18, 109, 93, 189, 255, 254, 209, 106, 190, 93, 33, 3, 112, 49, 138, 133, 0, 145, 243, 107, 129, 72, 128, 44, 224, 160, 191, 239, 215, 82, 203, 122, 188, 187, 239, 112, 111, 163, 243, 20, 59, 214, 9, 186, 0, 64, 95, 59, 61, 13, 57, 225, 81, 24, 150, 141, 23, 48, 26, 14, 213, 124, 27, 167, 42, 17, 127, 205, 74, 63, 19, 6, 114, 95, 197, 247, 69, 165, 155, 189, 86, 207, 14, 138, 152, 213, 114, 200, 6, 109, 24, 24, 151, 53, 240, 90, 110, 113, 6, 121, 179, 84, 124, 46, 86, 184, 100, 123, 244, 125, 103, 226, 110, 117, 58, 208, 89, 202, 62, 97, 16, 218, 2, 77, 162, 24, 175, 94, 111, 111, 15, 139, 17, 254, 252, 128, 105, 227, 162, 34, 91, 212, 122, 26, 203, 165, 236, 9, 122, 54, 58, 31, 214, 81, 224, 91, 214, 99, 142, 231, 82, 107, 127, 56, 157, 102, 183, 219, 180, 10, 180, 101, 184, 229, 195, 115, 89, 167, 115, 110, 56, 170, 128, 6, 31, 57, 160, 153, 62, 106, 227, 95, 45, 63, 150, 62, 160, 49, 129, 34, 227, 42, 37, 55, 145, 159, 182, 163, 4, 231, 80, 140, 17, 112, 228, 211, 43 },
                            ProductLineId = new Guid("3d66d92e-caae-45e0-9c41-d9d824fb37aa"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_number");

                    b.Property<OrderStatus>("OrderStatus")
                        .HasColumnType("order_status")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId", "OrderId")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Inventory")
                        .HasColumnType("integer")
                        .HasColumnName("inventory");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<Guid?>("ProductSizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_size_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_products_product_line_id");

                    b.HasIndex("ProductSizeId")
                        .HasDatabaseName("ix_products_product_size_id");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f2d9e5a-3cca-48a7-8890-356a7daa9c18"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("4e176c2a-03a4-4ece-9bfa-4ec88519cb83"),
                            ProductSizeId = new Guid("412875d1-dab6-4fb0-9f8e-d9f173e6280a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("76b31935-7366-4af3-8d11-098dff9d7cbd"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("4e176c2a-03a4-4ece-9bfa-4ec88519cb83"),
                            ProductSizeId = new Guid("cae65fc6-9068-4170-900f-078d955e051b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dc9fc523-f151-4db5-87de-c91275eb38bd"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("4e176c2a-03a4-4ece-9bfa-4ec88519cb83"),
                            ProductSizeId = new Guid("587260c4-ea42-4b92-b9be-c47a33cf9f4b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("915db48e-70a8-4fd0-9ef8-f6d39167841a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("2cdc397f-fae4-4297-b61e-6530eca8280e"),
                            ProductSizeId = new Guid("412875d1-dab6-4fb0-9f8e-d9f173e6280a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d5409230-18bd-4eb6-a4d6-2bbde186480a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("2cdc397f-fae4-4297-b61e-6530eca8280e"),
                            ProductSizeId = new Guid("cae65fc6-9068-4170-900f-078d955e051b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("06d26a84-bdd6-49f5-bb05-ea50364c3a65"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("2cdc397f-fae4-4297-b61e-6530eca8280e"),
                            ProductSizeId = new Guid("587260c4-ea42-4b92-b9be-c47a33cf9f4b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fe8826a3-facc-45ad-b7c7-c323bc439454"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("952b8a28-8642-4d19-8b83-a7c508495a99"),
                            ProductSizeId = new Guid("412875d1-dab6-4fb0-9f8e-d9f173e6280a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("48b8ab2a-521f-4eb4-b26c-4c1256524a6d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("952b8a28-8642-4d19-8b83-a7c508495a99"),
                            ProductSizeId = new Guid("cae65fc6-9068-4170-900f-078d955e051b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("32965880-268c-4051-828f-6f4cda37eda9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("952b8a28-8642-4d19-8b83-a7c508495a99"),
                            ProductSizeId = new Guid("587260c4-ea42-4b92-b9be-c47a33cf9f4b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b4345bd9-b394-4b6d-8900-e8897217ecda"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("3d66d92e-caae-45e0-9c41-d9d824fb37aa"),
                            ProductSizeId = new Guid("412875d1-dab6-4fb0-9f8e-d9f173e6280a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("08ba9703-51e9-4fd4-ad5d-9d7846720044"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("3d66d92e-caae-45e0-9c41-d9d824fb37aa"),
                            ProductSizeId = new Guid("cae65fc6-9068-4170-900f-078d955e051b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d2504f9d-31ed-4ab5-b422-e9159ed93703"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("3d66d92e-caae-45e0-9c41-d9d824fb37aa"),
                            ProductSizeId = new Guid("587260c4-ea42-4b92-b9be-c47a33cf9f4b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b9a89430-7e04-408e-8762-941cfa279188"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("3d66d92e-caae-45e0-9c41-d9d824fb37aa"),
                            ProductSizeId = new Guid("412875d1-dab6-4fb0-9f8e-d9f173e6280a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("432c073e-968a-4daa-89a7-0cf2c83d35fe"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("3d66d92e-caae-45e0-9c41-d9d824fb37aa"),
                            ProductSizeId = new Guid("cae65fc6-9068-4170-900f-078d955e051b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e9d49c50-7228-4d3b-bc63-40915250bfd2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("3d66d92e-caae-45e0-9c41-d9d824fb37aa"),
                            ProductSizeId = new Guid("587260c4-ea42-4b92-b9be-c47a33cf9f4b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_line");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_product_line_category_id");

                    b.ToTable("product_line", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e176c2a-03a4-4ece-9bfa-4ec88519cb83"),
                            CategoryId = new Guid("3d9af9d9-caa9-43d8-b030-5d8d3260aa12"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A comfortable and stylish cotton T-shirt.",
                            Price = 19.99m,
                            Title = "Cotton T-Shirt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2cdc397f-fae4-4297-b61e-6530eca8280e"),
                            CategoryId = new Guid("53d7083a-5e0a-4bb2-894d-8ddf54dc6bdc"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Slim fit jeans for a modern look.",
                            Price = 49.99m,
                            Title = "Slim Fit Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("952b8a28-8642-4d19-8b83-a7c508495a99"),
                            CategoryId = new Guid("0ea2ec9b-4b90-4e36-9768-bad90de106ad"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A floral summer dress for any occasion.",
                            Price = 29.99m,
                            Title = "Summer Dress",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3d66d92e-caae-45e0-9c41-d9d824fb37aa"),
                            CategoryId = new Guid("a9a68ded-3668-4a40-9453-987e7138ee46"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Casual sneakers for everyday wear.",
                            Price = 39.99m,
                            Title = "Sneakers",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ebd70963-4c19-4c91-b0d7-3630af5011d4"),
                            CategoryId = new Guid("d15abc6c-d5c6-4448-96be-a08b5784a6f2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Classic leather belt to complete your look.",
                            Price = 14.99m,
                            Title = "Leather Belt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_product_size");

                    b.ToTable("product_size", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("412875d1-dab6-4fb0-9f8e-d9f173e6280a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "S"
                        },
                        new
                        {
                            Id = new Guid("cae65fc6-9068-4170-900f-078d955e051b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "M"
                        },
                        new
                        {
                            Id = new Guid("587260c4-ea42-4b92-b9be-c47a33cf9f4b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "L"
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_reviews_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Role>("Role")
                        .HasColumnType("role")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("40793f8f-43dd-4c83-aa87-59db4640efc0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@mail.com",
                            FirstName = "JohnAdmin",
                            LastName = "Doe",
                            Password = "4e675415b1aae06994e57bb9de740f89777f3f3ca801aebcc518868c6ef601be",
                            Role = Role.Admin,
                            Salt = new byte[] { 189, 227, 197, 22, 200, 238, 20, 70, 70, 190, 185, 243, 79, 54, 103, 198, 227, 72, 99, 22, 85, 117, 88, 180, 92, 67, 27, 245, 249, 235, 135, 23, 149, 97, 107, 115, 110, 152, 183, 127, 52, 236, 114, 106, 255, 69, 100, 132, 71, 148, 87, 125, 201, 156, 238, 7, 35, 0, 57, 47, 111, 3, 70, 25 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9f8169eb-fbe1-4fea-83c4-0aed7bc1e07d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer@mail.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Password = "63d7789c02e130a6bcfdebbc7627dadf3046037c211d8a811f30c9b6f687ff30",
                            Role = Role.Customer,
                            Salt = new byte[] { 50, 137, 157, 182, 25, 253, 242, 47, 20, 44, 145, 16, 98, 250, 114, 214, 226, 3, 162, 247, 230, 116, 120, 0, 183, 240, 129, 127, 115, 38, 108, 173, 53, 53, 137, 96, 206, 176, 39, 238, 216, 180, 215, 214, 107, 195, 146, 66, 165, 122, 7, 129, 130, 80, 240, 38, 235, 99, 200, 5, 20, 54, 108, 167 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Address")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Avatar")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Avatar", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_avatar_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_product_line_product_line_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Order", null)
                        .WithMany("orderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", "ProductLine")
                        .WithMany("Products")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_product_line_product_line_id");

                    b.HasOne("Ecommerce.Core.src.Entities.ProductSize", "ProductSize")
                        .WithMany("Products")
                        .HasForeignKey("ProductSizeId")
                        .HasConstraintName("fk_products_product_size_product_size_id");

                    b.Navigation("ProductLine");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Category", "Category")
                        .WithMany("ProductLines")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_line_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_products_product_id");

                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Navigation("ProductLines");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Avatar")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
