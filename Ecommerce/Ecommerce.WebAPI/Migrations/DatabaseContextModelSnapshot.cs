// <auto-generated />
using System;
using Ecommerce.Core.src.Entities;
using Ecommerce.WebAPI.src.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.WebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", new[] { "registered", "delivered", "canceled", "pending" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "admin", "customer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("house_number");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_address_user_id");

                    b.ToTable("address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1afc632d-7ddb-48eb-874f-7a5992b722da"),
                            City = "Cityville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "123",
                            PostCode = "12345",
                            Street = "Main St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("3fa0569d-37ba-4266-9eb1-aacd4ccf4124")
                        },
                        new
                        {
                            Id = new Guid("22b4f9ca-671b-4fff-a629-5cca7c2a8c79"),
                            City = "Townsville",
                            Country = "Countryland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HouseNumber = "456",
                            PostCode = "67890",
                            Street = "Oak St",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("28f2acc0-c6d3-433b-8cc1-bf1b02d5f9b6")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_avatar");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_avatar_user_id");

                    b.ToTable("avatar", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("231d1771-0459-4ccd-9da3-3934a890931d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 4, 5, 6 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("3fa0569d-37ba-4266-9eb1-aacd4ccf4124")
                        },
                        new
                        {
                            Id = new Guid("cf73de5f-5d0b-4dd1-91c9-ccefbc638251"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 10, 11, 12 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("28f2acc0-c6d3-433b-8cc1-bf1b02d5f9b6")
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba21564a-d79a-4c82-bd9c-67d4f04e4919"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "tshirts.jpg",
                            Name = "T-Shirts",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("528f4159-2496-487c-a5a5-7ff49274191a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "jeans.jpg",
                            Name = "Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("456f4397-787a-4548-abf1-e799e9975974"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "dresses.jpg",
                            Name = "Dresses",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5d8b2e2c-a13e-4e7c-a592-7e036cfaa312"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "footwear.jpg",
                            Name = "Footwear",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fb47dd9c-8afa-4164-8345-c1def0bf1031"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "accessories.jpg",
                            Name = "Accessories",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_image");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_image_product_line_id");

                    b.ToTable("image", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("77126838-23a7-4d96-87ff-00f60b3a3b7a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 6, 67, 86, 8, 77, 89, 150, 9, 65, 190, 161, 40, 198, 196, 130, 23, 51, 221, 160, 121, 100, 7, 160, 120, 65, 85, 95, 104, 151, 196, 250, 62, 139, 96, 125, 180, 165, 14, 142, 119, 159, 219, 156, 80, 30, 11, 136, 38, 44, 234, 24, 241, 101, 89, 218, 88, 129, 13, 174, 201, 80, 27, 144, 39, 199, 74, 23, 62, 97, 133, 237, 142, 99, 126, 129, 113, 121, 107, 203, 135, 2, 201, 218, 202, 163, 220, 19, 246, 168, 175, 99, 92, 78, 151, 33, 196, 152, 180, 200, 98, 112, 130, 204, 164, 71, 208, 127, 153, 220, 144, 42, 182, 32, 99, 247, 193, 239, 54, 249, 117, 10, 150, 163, 214, 68, 61, 220, 58, 189, 46, 152, 215, 209, 213, 202, 5, 191, 20, 84, 217, 63, 120, 234, 127, 162, 51, 230, 47, 108, 200, 239, 33, 176, 12, 228, 15, 75, 108, 78, 213, 67, 33, 81, 2, 177, 252, 250, 189, 17, 117, 79, 155, 156, 132, 183, 142, 29, 88, 44, 12, 202, 190, 226, 163, 252, 11, 175, 34, 100, 119, 62, 240, 125, 127, 159, 19, 189, 151, 121, 138, 6, 53, 211, 27, 222, 215, 153, 112, 67, 245, 101, 82, 237, 178, 220, 158, 170, 99, 56, 146, 16, 37, 52, 164, 78, 121, 118, 59, 204, 120, 141, 45, 153, 168, 54, 228, 85, 192, 92, 4, 255, 139, 30, 154, 129, 221, 90, 25, 62, 201, 54, 74, 87, 178, 30, 113, 189, 210, 31, 133, 202, 13, 185, 38, 70, 167, 119, 23, 211, 189, 190, 170, 79, 185, 65, 7, 70, 112, 82, 240, 234, 192, 41, 214, 23, 198, 234, 133, 239, 112, 247, 80, 112, 1, 46, 193, 52, 107, 163, 32 },
                            ProductLineId = new Guid("b5d0f8a5-e2d3-400b-93e5-d599c4c3aa5c"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c27b7b72-5a17-4015-91cb-cea10ab6fd46"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 192, 47, 228, 70, 143, 125, 6, 109, 116, 130, 174, 110, 133, 28, 214, 97, 8, 99, 124, 237, 112, 146, 227, 241, 248, 67, 98, 39, 66, 145, 255, 99, 216, 211, 125, 17, 121, 178, 190, 152, 72, 75, 142, 85, 225, 91, 179, 254, 151, 173, 107, 30, 66, 41, 50, 140, 147, 253, 103, 151, 24, 34, 149, 204, 191, 255, 77, 38, 240, 82, 60, 39, 48, 185, 59, 46, 3, 57, 249, 216, 35, 55, 222, 17, 240, 185, 244, 0, 17, 173, 89, 246, 53, 251, 170, 47, 155, 52, 255, 52, 119, 236, 68, 119, 191, 59, 40, 123, 189, 9, 134, 173, 165, 193, 235, 27, 70, 118, 55, 226, 212, 143, 114, 241, 101, 104, 93, 111, 93, 143, 108, 238, 19, 131, 80, 199, 13, 191, 152, 58, 23, 157, 184, 136, 0, 54, 128, 243, 40, 56, 218, 152, 150, 127, 40, 50, 14, 144, 164, 43, 225, 113, 76, 19, 102, 30, 200, 1, 125, 135, 190, 86, 140, 229, 29, 179, 21, 71, 53, 18, 145, 10, 6, 58, 60, 89, 164, 134, 110, 246, 86, 146, 1, 143, 127, 78, 5, 86, 202, 99, 41, 140, 138, 102, 60, 145, 191, 43, 164, 33, 239, 74, 228, 50, 211, 90, 224, 64, 4, 126, 119, 148, 250, 54, 243, 107, 35, 86, 106, 191, 252, 204, 179, 45, 108, 65, 17, 68, 80, 137, 174, 176, 67, 125, 34, 32, 198, 22, 221, 121, 75, 115, 229, 34, 242, 89, 42, 17, 247, 181, 247, 136, 241, 109, 77, 149, 64, 192, 77, 206, 4, 106, 223, 48, 45, 230, 52, 44, 29, 218, 207, 247, 101, 4, 140, 33, 203, 160, 160, 131, 42, 86, 121, 105, 69, 115, 202, 153, 248, 26 },
                            ProductLineId = new Guid("4ab6dbb2-1b4d-4243-a596-692d16028053"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6f2b1415-5078-480c-a61f-1ee7a67c5f0c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 22, 219, 243, 95, 99, 218, 195, 160, 115, 180, 172, 172, 2, 186, 240, 70, 163, 215, 177, 250, 39, 122, 180, 140, 121, 23, 19, 251, 60, 60, 222, 17, 67, 44, 64, 59, 120, 237, 215, 119, 9, 195, 97, 65, 100, 55, 183, 204, 169, 30, 35, 112, 93, 10, 123, 218, 203, 217, 109, 84, 67, 14, 139, 189, 140, 30, 154, 189, 112, 98, 45, 4, 187, 151, 218, 178, 21, 114, 29, 218, 100, 24, 225, 57, 193, 1, 14, 85, 60, 181, 110, 96, 66, 243, 128, 246, 55, 112, 146, 157, 57, 248, 187, 84, 162, 156, 41, 3, 199, 60, 60, 104, 188, 36, 204, 3, 60, 71, 11, 240, 166, 146, 226, 73, 247, 159, 114, 167, 71, 194, 133, 255, 97, 164, 69, 52, 109, 199, 193, 22, 40, 68, 174, 239, 33, 114, 135, 203, 158, 191, 91, 71, 128, 33, 89, 72, 87, 21, 53, 139, 185, 73, 233, 179, 160, 206, 232, 150, 110, 83, 120, 38, 237, 146, 250, 143, 22, 6, 43, 43, 151, 117, 47, 122, 93, 123, 12, 43, 158, 242, 68, 14, 110, 88, 246, 172, 134, 125, 252, 218, 211, 115, 129, 55, 184, 116, 187, 201, 128, 34, 39, 82, 95, 171, 196, 152, 195, 158, 60, 222, 211, 176, 97, 6, 255, 50, 190, 236, 150, 78, 66, 248, 9, 81, 135, 147, 172, 127, 11, 139, 202, 138, 179, 95, 233, 233, 199, 183, 210, 13, 251, 109, 89, 130, 86, 217, 145, 99, 12, 135, 112, 218, 163, 180, 172, 45, 25, 41, 181, 142, 11, 112, 199, 103, 190, 30, 177, 206, 129, 4, 74, 143, 144, 181, 107, 105, 81, 151, 114, 202, 133, 126, 203, 52, 140, 21, 208, 116, 217, 68 },
                            ProductLineId = new Guid("53764c82-f3b9-4560-aeda-55f6208c3e43"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8011b610-468b-4cfb-899f-6818abcb9408"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 141, 36, 168, 107, 82, 200, 141, 75, 121, 33, 210, 223, 180, 103, 181, 51, 170, 91, 189, 40, 73, 197, 200, 56, 146, 20, 9, 66, 213, 229, 152, 164, 205, 217, 141, 27, 159, 11, 27, 222, 176, 193, 172, 206, 103, 173, 242, 92, 179, 84, 205, 55, 147, 83, 244, 56, 2, 63, 54, 7, 206, 48, 79, 179, 93, 159, 81, 49, 226, 66, 42, 247, 26, 21, 22, 236, 218, 153, 71, 197, 227, 141, 80, 51, 47, 204, 92, 65, 179, 125, 243, 103, 162, 125, 27, 90, 31, 236, 188, 146, 128, 70, 129, 98, 148, 106, 203, 16, 221, 251, 120, 234, 231, 156, 112, 245, 75, 13, 202, 19, 206, 128, 251, 168, 199, 137, 206, 202, 229, 9, 166, 16, 132, 246, 181, 243, 237, 124, 92, 123, 140, 236, 252, 188, 11, 194, 58, 124, 219, 229, 45, 30, 63, 237, 221, 126, 239, 72, 146, 142, 223, 189, 87, 238, 9, 225, 176, 134, 160, 203, 170, 14, 41, 206, 96, 25, 83, 96, 131, 213, 227, 238, 50, 47, 240, 211, 0, 213, 153, 40, 45, 140, 187, 3, 156, 199, 245, 19, 132, 170, 249, 204, 10, 232, 52, 117, 206, 215, 254, 106, 103, 227, 174, 4, 98, 68, 198, 169, 168, 107, 51, 40, 227, 74, 111, 16, 90, 246, 176, 229, 124, 143, 176, 67, 125, 168, 190, 114, 34, 25, 40, 116, 45, 181, 118, 141, 247, 205, 198, 133, 152, 181, 39, 226, 163, 157, 152, 101, 68, 20, 223, 72, 154, 47, 174, 198, 71, 196, 79, 64, 112, 106, 73, 67, 215, 28, 5, 6, 219, 197, 20, 220, 112, 184, 137, 149, 181, 79, 180, 93, 141, 179, 201, 222, 64, 56, 117, 187, 25, 136 },
                            ProductLineId = new Guid("1120f424-0006-4be5-8c6e-0eee5ad31be1"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ff5465ad-e002-4c51-8fc0-7167acb95994"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 247, 147, 224, 48, 82, 33, 80, 136, 168, 206, 57, 215, 46, 216, 222, 183, 22, 121, 113, 58, 51, 123, 206, 155, 75, 250, 76, 51, 243, 112, 58, 107, 247, 204, 243, 122, 247, 171, 244, 71, 3, 156, 53, 156, 166, 53, 204, 53, 46, 64, 251, 96, 219, 171, 214, 145, 162, 21, 104, 217, 18, 57, 194, 149, 30, 95, 206, 177, 156, 159, 156, 49, 219, 202, 179, 159, 71, 0, 190, 73, 117, 102, 134, 81, 68, 194, 2, 109, 239, 95, 237, 87, 85, 85, 24, 46, 90, 182, 163, 55, 236, 206, 100, 138, 78, 2, 137, 191, 118, 39, 55, 206, 171, 214, 23, 24, 137, 56, 102, 250, 58, 128, 137, 36, 83, 99, 108, 52, 23, 64, 19, 44, 202, 194, 201, 94, 193, 95, 163, 55, 209, 44, 78, 130, 28, 27, 149, 243, 226, 87, 251, 251, 52, 187, 15, 60, 208, 146, 65, 74, 74, 185, 185, 145, 63, 220, 32, 78, 69, 220, 128, 172, 71, 17, 151, 185, 98, 195, 244, 33, 126, 226, 73, 9, 196, 211, 86, 18, 2, 190, 139, 83, 146, 157, 218, 1, 247, 226, 250, 37, 178, 85, 4, 70, 34, 40, 37, 219, 61, 160, 91, 163, 0, 172, 134, 245, 239, 175, 221, 44, 71, 99, 73, 163, 0, 217, 164, 150, 154, 56, 237, 49, 230, 13, 194, 224, 102, 97, 173, 34, 65, 190, 170, 99, 240, 255, 5, 170, 171, 66, 12, 179, 205, 110, 192, 60, 115, 118, 200, 27, 255, 109, 214, 140, 230, 53, 192, 90, 201, 205, 23, 167, 223, 208, 197, 200, 96, 137, 175, 2, 76, 225, 74, 164, 55, 29, 142, 75, 63, 110, 202, 238, 44, 11, 167, 18, 245, 11, 86, 64 },
                            ProductLineId = new Guid("b5d0f8a5-e2d3-400b-93e5-d599c4c3aa5c"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cf654ea0-0ac0-4df1-8f27-d1033c2db9f7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 216, 59, 233, 13, 130, 191, 210, 24, 48, 9, 206, 64, 207, 131, 6, 220, 228, 4, 191, 225, 173, 249, 124, 170, 69, 82, 163, 57, 22, 95, 97, 127, 77, 104, 56, 160, 164, 159, 63, 209, 179, 215, 164, 89, 226, 130, 25, 10, 222, 214, 5, 6, 127, 114, 166, 56, 7, 123, 108, 174, 128, 145, 198, 220, 35, 82, 236, 222, 85, 236, 181, 66, 241, 238, 107, 149, 250, 82, 120, 93, 195, 2, 254, 204, 59, 156, 23, 96, 174, 82, 187, 113, 199, 105, 252, 7, 37, 4, 171, 35, 182, 117, 178, 50, 230, 31, 187, 194, 152, 251, 110, 169, 108, 48, 130, 99, 119, 216, 36, 199, 214, 34, 127, 4, 184, 230, 130, 161, 146, 3, 12, 118, 218, 110, 178, 84, 111, 142, 113, 245, 182, 143, 32, 82, 88, 101, 190, 89, 44, 84, 81, 7, 190, 39, 19, 63, 234, 242, 93, 188, 69, 70, 116, 15, 128, 213, 152, 153, 213, 209, 145, 166, 71, 29, 150, 58, 97, 154, 192, 66, 181, 85, 255, 51, 102, 233, 173, 144, 23, 42, 137, 212, 239, 67, 83, 227, 84, 168, 242, 171, 165, 13, 17, 138, 221, 246, 36, 253, 54, 168, 241, 29, 146, 118, 0, 125, 45, 73, 203, 187, 131, 217, 98, 169, 77, 41, 56, 164, 180, 106, 82, 215, 152, 228, 89, 191, 250, 100, 80, 40, 193, 253, 76, 62, 25, 130, 19, 255, 81, 250, 40, 152, 181, 128, 133, 51, 108, 98, 170, 126, 192, 165, 75, 216, 5, 225, 248, 56, 30, 204, 70, 202, 141, 232, 118, 201, 28, 114, 200, 38, 186, 43, 44, 0, 130, 180, 59, 204, 67, 246, 55, 94, 245, 151, 163, 193, 21, 185, 112, 23 },
                            ProductLineId = new Guid("4ab6dbb2-1b4d-4243-a596-692d16028053"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d868d46a-220d-4063-939b-f483f949d6eb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 169, 84, 54, 4, 29, 56, 138, 177, 250, 148, 120, 234, 245, 93, 114, 156, 100, 195, 198, 37, 182, 139, 197, 233, 106, 126, 21, 12, 193, 210, 170, 33, 128, 104, 151, 90, 39, 142, 41, 13, 44, 137, 211, 14, 50, 16, 241, 221, 148, 230, 148, 138, 87, 209, 178, 70, 48, 246, 159, 142, 179, 119, 211, 12, 151, 113, 42, 155, 164, 138, 210, 200, 31, 75, 196, 40, 125, 169, 113, 47, 221, 153, 23, 205, 0, 91, 87, 170, 47, 137, 150, 146, 215, 106, 12, 87, 181, 225, 48, 205, 10, 183, 175, 143, 224, 144, 88, 54, 161, 167, 39, 213, 70, 108, 79, 20, 178, 64, 13, 234, 122, 184, 122, 30, 55, 56, 188, 120, 178, 150, 74, 128, 199, 8, 194, 69, 16, 228, 58, 101, 90, 243, 40, 190, 130, 211, 54, 68, 168, 42, 198, 139, 165, 78, 19, 248, 86, 24, 105, 229, 83, 155, 110, 115, 179, 80, 12, 250, 216, 197, 70, 136, 24, 248, 216, 51, 43, 52, 47, 80, 206, 205, 216, 185, 37, 92, 57, 184, 239, 131, 131, 102, 246, 142, 228, 94, 192, 113, 112, 187, 2, 134, 166, 212, 197, 85, 133, 2, 125, 202, 155, 224, 112, 111, 144, 53, 159, 209, 233, 83, 149, 181, 15, 238, 13, 26, 5, 160, 234, 239, 51, 4, 77, 235, 69, 39, 197, 11, 78, 64, 235, 137, 237, 158, 108, 142, 194, 3, 241, 144, 97, 103, 151, 227, 182, 168, 81, 76, 241, 3, 40, 207, 215, 77, 92, 170, 69, 139, 172, 188, 158, 200, 0, 132, 17, 52, 201, 217, 47, 39, 119, 73, 217, 16, 246, 49, 250, 20, 9, 61, 10, 95, 231, 37, 129, 28, 29, 40, 48, 229 },
                            ProductLineId = new Guid("53764c82-f3b9-4560-aeda-55f6208c3e43"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("45b34122-315d-4a8e-8a92-28866b90b4c2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = new byte[] { 89, 166, 145, 215, 4, 234, 88, 168, 107, 107, 46, 110, 36, 142, 72, 153, 147, 143, 59, 101, 223, 6, 180, 13, 172, 123, 130, 38, 220, 4, 40, 229, 63, 123, 132, 249, 111, 44, 212, 252, 132, 121, 98, 146, 228, 105, 12, 63, 214, 158, 2, 118, 129, 133, 200, 254, 203, 176, 58, 6, 137, 23, 152, 41, 91, 204, 25, 90, 13, 131, 212, 16, 167, 34, 212, 141, 204, 199, 17, 240, 228, 212, 136, 5, 203, 11, 183, 133, 41, 65, 238, 84, 220, 230, 148, 134, 73, 230, 207, 145, 112, 109, 175, 31, 88, 248, 145, 79, 79, 123, 137, 34, 2, 166, 233, 123, 97, 31, 217, 129, 0, 241, 222, 81, 214, 206, 228, 171, 243, 220, 211, 175, 80, 74, 48, 28, 153, 8, 93, 189, 218, 178, 205, 205, 221, 105, 251, 142, 66, 251, 179, 221, 64, 33, 160, 90, 98, 127, 9, 17, 233, 76, 9, 221, 13, 218, 55, 152, 19, 48, 83, 83, 216, 113, 98, 134, 150, 204, 91, 112, 240, 24, 109, 237, 166, 139, 195, 185, 174, 113, 68, 194, 83, 36, 133, 206, 67, 114, 81, 162, 128, 21, 255, 34, 152, 45, 142, 75, 247, 6, 119, 128, 255, 219, 18, 79, 103, 232, 106, 250, 74, 107, 79, 37, 34, 247, 1, 15, 135, 117, 168, 116, 115, 225, 35, 91, 137, 87, 225, 114, 123, 144, 120, 107, 220, 43, 87, 168, 79, 77, 201, 143, 4, 182, 225, 112, 214, 236, 52, 157, 209, 136, 195, 178, 16, 19, 14, 157, 136, 69, 62, 130, 206, 78, 216, 100, 235, 84, 130, 255, 102, 99, 150, 199, 121, 74, 236, 93, 107, 231, 106, 27, 247, 163, 223, 89, 176, 211, 21, 56 },
                            ProductLineId = new Guid("1120f424-0006-4be5-8c6e-0eee5ad31be1"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_number");

                    b.Property<OrderStatus>("OrderStatus")
                        .HasColumnType("order_status")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId", "OrderId")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Inventory")
                        .HasColumnType("integer")
                        .HasColumnName("inventory");

                    b.Property<Guid>("ProductLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_line_id");

                    b.Property<Guid?>("ProductSizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_size_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("ProductLineId")
                        .HasDatabaseName("ix_products_product_line_id");

                    b.HasIndex("ProductSizeId")
                        .HasDatabaseName("ix_products_product_size_id");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8dffe2f3-fb91-499b-87ef-cb97ebc20d37"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("b5d0f8a5-e2d3-400b-93e5-d599c4c3aa5c"),
                            ProductSizeId = new Guid("0ec79abf-46c2-4565-b1b2-0d479a855ef0"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("462c5cd9-820a-466d-8e7a-35d9f47a98b4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("b5d0f8a5-e2d3-400b-93e5-d599c4c3aa5c"),
                            ProductSizeId = new Guid("3be58a53-45c4-40a1-87d8-362e76672667"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("21f4d02e-3415-40d4-bf0d-db69aa7d7d07"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("b5d0f8a5-e2d3-400b-93e5-d599c4c3aa5c"),
                            ProductSizeId = new Guid("ea0a152c-966a-4944-b888-6e4d1a709906"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("26d696ff-7397-4c1f-9119-596337bdbacf"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("b5d0f8a5-e2d3-400b-93e5-d599c4c3aa5c"),
                            ProductSizeId = new Guid("54c5b630-08a2-4bf7-9c56-a5615148b5cd"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8c4370e4-5077-4302-9fb1-5cb6ff482bb2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("4ab6dbb2-1b4d-4243-a596-692d16028053"),
                            ProductSizeId = new Guid("0ec79abf-46c2-4565-b1b2-0d479a855ef0"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("56458e92-9cc3-4ae0-8273-7213cb9eb9e5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("4ab6dbb2-1b4d-4243-a596-692d16028053"),
                            ProductSizeId = new Guid("3be58a53-45c4-40a1-87d8-362e76672667"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1c1daa58-00c9-4d65-a110-a1f15ea88709"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("4ab6dbb2-1b4d-4243-a596-692d16028053"),
                            ProductSizeId = new Guid("ea0a152c-966a-4944-b888-6e4d1a709906"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c13cf677-6da3-4311-9471-f132606bddd3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("4ab6dbb2-1b4d-4243-a596-692d16028053"),
                            ProductSizeId = new Guid("54c5b630-08a2-4bf7-9c56-a5615148b5cd"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("346cfebc-d305-4fff-b366-9311675fc8fe"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("53764c82-f3b9-4560-aeda-55f6208c3e43"),
                            ProductSizeId = new Guid("0ec79abf-46c2-4565-b1b2-0d479a855ef0"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9b60b36b-0664-4da9-826d-73e1e5a6e98b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("53764c82-f3b9-4560-aeda-55f6208c3e43"),
                            ProductSizeId = new Guid("3be58a53-45c4-40a1-87d8-362e76672667"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("229215ba-aa4a-4508-be64-653e4cb8b5d6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("53764c82-f3b9-4560-aeda-55f6208c3e43"),
                            ProductSizeId = new Guid("ea0a152c-966a-4944-b888-6e4d1a709906"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("63111bb8-68d4-4a12-9ffc-69be2bf49d93"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("53764c82-f3b9-4560-aeda-55f6208c3e43"),
                            ProductSizeId = new Guid("54c5b630-08a2-4bf7-9c56-a5615148b5cd"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4ebd6d0b-9f5e-4e33-adb7-3f5185b0b9bf"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("1120f424-0006-4be5-8c6e-0eee5ad31be1"),
                            ProductSizeId = new Guid("0ec79abf-46c2-4565-b1b2-0d479a855ef0"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6f51eb38-7ec8-476d-b995-c0f2c8f2ad47"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("1120f424-0006-4be5-8c6e-0eee5ad31be1"),
                            ProductSizeId = new Guid("3be58a53-45c4-40a1-87d8-362e76672667"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f6e7f88e-4d99-4561-b0fc-46f6c4a439eb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("1120f424-0006-4be5-8c6e-0eee5ad31be1"),
                            ProductSizeId = new Guid("ea0a152c-966a-4944-b888-6e4d1a709906"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3ea83f7a-6f8a-4153-8568-eb064229f909"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("1120f424-0006-4be5-8c6e-0eee5ad31be1"),
                            ProductSizeId = new Guid("54c5b630-08a2-4bf7-9c56-a5615148b5cd"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3d8513b3-9b9a-4ab3-97dd-f05041047c48"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("1120f424-0006-4be5-8c6e-0eee5ad31be1"),
                            ProductSizeId = new Guid("0ec79abf-46c2-4565-b1b2-0d479a855ef0"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("338fb598-4f8b-4ac3-a3b6-de51a4587510"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("1120f424-0006-4be5-8c6e-0eee5ad31be1"),
                            ProductSizeId = new Guid("3be58a53-45c4-40a1-87d8-362e76672667"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("212b764f-057a-4757-86b7-4b51e888ef86"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 200,
                            ProductLineId = new Guid("1120f424-0006-4be5-8c6e-0eee5ad31be1"),
                            ProductSizeId = new Guid("ea0a152c-966a-4944-b888-6e4d1a709906"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bb0a1bdd-29ec-4957-9ec5-0359dfa48018"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Inventory = 100,
                            ProductLineId = new Guid("1120f424-0006-4be5-8c6e-0eee5ad31be1"),
                            ProductSizeId = new Guid("54c5b630-08a2-4bf7-9c56-a5615148b5cd"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_line");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_product_line_category_id");

                    b.ToTable("product_line", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5d0f8a5-e2d3-400b-93e5-d599c4c3aa5c"),
                            CategoryId = new Guid("ba21564a-d79a-4c82-bd9c-67d4f04e4919"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A comfortable and stylish cotton T-shirt.",
                            Price = 19.99m,
                            Title = "Cotton T-Shirt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4ab6dbb2-1b4d-4243-a596-692d16028053"),
                            CategoryId = new Guid("528f4159-2496-487c-a5a5-7ff49274191a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Slim fit jeans for a modern look.",
                            Price = 49.99m,
                            Title = "Slim Fit Jeans",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("53764c82-f3b9-4560-aeda-55f6208c3e43"),
                            CategoryId = new Guid("456f4397-787a-4548-abf1-e799e9975974"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A floral summer dress for any occasion.",
                            Price = 29.99m,
                            Title = "Summer Dress",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1120f424-0006-4be5-8c6e-0eee5ad31be1"),
                            CategoryId = new Guid("5d8b2e2c-a13e-4e7c-a592-7e036cfaa312"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Casual sneakers for everyday wear.",
                            Price = 39.99m,
                            Title = "Sneakers",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("80073e7b-6d40-478a-881e-ee010fac5fcb"),
                            CategoryId = new Guid("fb47dd9c-8afa-4164-8345-c1def0bf1031"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Classic leather belt to complete your look.",
                            Price = 14.99m,
                            Title = "Leather Belt",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_product_size");

                    b.ToTable("product_size", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ec79abf-46c2-4565-b1b2-0d479a855ef0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 32
                        },
                        new
                        {
                            Id = new Guid("3be58a53-45c4-40a1-87d8-362e76672667"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 34
                        },
                        new
                        {
                            Id = new Guid("ea0a152c-966a-4944-b888-6e4d1a709906"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 36
                        },
                        new
                        {
                            Id = new Guid("54c5b630-08a2-4bf7-9c56-a5615148b5cd"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 38
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_reviews_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Role>("Role")
                        .HasColumnType("role")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa0569d-37ba-4266-9eb1-aacd4ccf4124"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@mail.com",
                            FirstName = "JohnAdmin",
                            LastName = "Doe",
                            Password = "32dce8a3b83df5f4af6a93c7a8c53a274e7cc1358d1d389797328cedbfa49d38",
                            Role = Role.Admin,
                            Salt = new byte[] { 94, 161, 214, 167, 2, 218, 52, 85, 206, 37, 226, 58, 190, 107, 221, 48, 228, 22, 239, 138, 185, 225, 23, 81, 145, 101, 173, 86, 75, 141, 130, 49, 73, 132, 180, 34, 221, 84, 180, 22, 21, 241, 123, 75, 227, 121, 91, 137, 254, 109, 80, 135, 107, 165, 159, 176, 27, 181, 4, 191, 207, 11, 20, 135 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("28f2acc0-c6d3-433b-8cc1-bf1b02d5f9b6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer@mail.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Password = "a2ad3588261b4ce6180d081d9f7b25022b194e1d211362bbf2dfc0bc145f8da7",
                            Role = Role.Customer,
                            Salt = new byte[] { 190, 101, 238, 27, 242, 110, 194, 31, 191, 238, 228, 131, 228, 100, 211, 78, 89, 244, 166, 249, 78, 156, 170, 63, 6, 72, 124, 221, 185, 144, 118, 251, 81, 161, 130, 80, 116, 68, 240, 226, 43, 61, 225, 67, 42, 84, 133, 122, 32, 166, 112, 230, 70, 215, 138, 237, 249, 109, 15, 130, 66, 54, 192, 151 },
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Address", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Address")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Avatar", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", null)
                        .WithOne("Avatar")
                        .HasForeignKey("Ecommerce.Core.src.Entities.Avatar", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_avatar_users_user_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Image", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_product_line_product_line_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.OrderItem", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Order", null)
                        .WithMany("orderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Product", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.ProductLine", "ProductLine")
                        .WithMany("Products")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_product_line_product_line_id");

                    b.HasOne("Ecommerce.Core.src.Entities.ProductSize", "ProductSize")
                        .WithMany("Products")
                        .HasForeignKey("ProductSizeId")
                        .HasConstraintName("fk_products_product_size_product_size_id");

                    b.Navigation("ProductLine");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Category", "Category")
                        .WithMany("ProductLines")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_line_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Review", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_products_product_id");

                    b.HasOne("Ecommerce.Core.src.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Category", b =>
                {
                    b.Navigation("ProductLines");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.Order", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductLine", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.ProductSize", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entities.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Avatar")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
